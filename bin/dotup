#!/bin/zsh

echo '

    ┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
    │││├┤ │ ┬├─┤│  │ │ ├─┤││   :: dots & things
    ┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
    @megalithic

Setting up dotfiles. If the ~/.dotfiles folder does not exist, it will be
cloned from https://github.com/megalithic/dotfiles. The zsh config uses the
Prezto framework, which will be installed or updated at this time.
'

# Detect OS
if [[ -z $PLATFORM ]]
then
  # unamestr=`uname`
  platform="unknown"

  if [[ "$(uname)" == "Darwin" ]]; then
    platform="macos"
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    platform="linux"
  elif [[ "$(expr substr $(uname -s) 1 5)" == 'FreeBSD' ]]; then
    platform='freebsd'
  elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
    platform="windows"
  fi

  export PLATFORM=$platform
fi


# HOMEDIR export exists?
if [[ -z $HOMEDIR ]]
then
  export HOMEDIR=$HOME
fi

# PRIVATES export exists?
if [[ -z $PRIVATES ]]
then
  export PRIVATES=$DOTS/private
  export PRIVATE=$DOTS/private
fi

# DOTDIR export exists?
if [[ -z $DOTS ]]
then
  export DOTS="$HOME/.dotfiles"
  export DOTDIR="$HOME/.dotfiles"
  export DIRDOTS="$HOME/.dotfiles"
fi

# git exists?
if [[ "$(which git)" == "" ]]
then
  echo "git not installed; requires xcode to continue.. install xcode? [y]"
  read answer

  if [[ $answer == [yY] ]]
  then
    echo "installing xcode"
    xcode-select --install
  fi
fi

# ~/.dotfiles dir exists?
if [[ ! -d $DOTS ]]
then
  echo "Cloning dotfiles..."
  mkdir -p $DOTS
  git clone --recursive git://github.com/megalithic/dotfiles.git "$DOTS"
else
  if [[ -z $SKIP_DOTFILES_UPDATE ]]
  then
    cd $DOTS
    git add -u .
    git stash
    git pull --recurse-submodules --rebase origin master
    git push origin master
    git stash pop
    cd $HOME
  fi
fi

# Install Homebrew
if ! type "brew" > /dev/null; then
  echo "Installing Homebrew..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

echo "Brewing things..."
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

brew update
brew bundle --file=$DOTS/homebrew/Brewfile

sudo xcodebuild -license accept
ln -sfv /usr/local/bin/gcc-4.9 /usr/local/bin/gcc
if [[ -a $DOTS/homebrew/Brewfile.local ]]
then
  # brew "private"/"local" Brewfile
  brew bundle --file=$DOTS/homebrew/Brewfile.local
fi

# Install Prezto
if [[ ! -d $HOME/.zprezto ]]
then
  echo "Installing Prezto (https://github.com/sorin-ionescu/prezto)..."
  git clone --recursive git://github.com/sorin-ionescu/prezto.git "$HOME/.zprezto"
else
  cd $HOME/.zprezto
  git reset --hard
  git pull origin master -f
  cd $HOME
fi

# Link $DOTS/bin files to $HOME/.bin
echo "Symlinking $DOTS/bin files to $HOME/.bin/..."
mkdir -p $HOME/.bin
rm -f $HOME/.bin/*
for found in $DOTS/bin/*; do
  source="$DOTS/$found"
  dest="$HOME/.bin/`basename \"${found%.*}\"`"

  ln -sf $source $dest
  echo "Symlinked binary $source to $dest"
done

# Run generic installers
$DOTS/bin/generic

# Run platform-based installers
$DOTS/bin/platform

# Symlink all the things
$DOTS/bin/symlinks

# Setup private repo and things
$DOTS/bin/private

# # Link zsh configuration files
# echo "Linking ZSH configuration files..."
# rm -f $HOME/.zlogin    \
#       $HOME/.zlogout   \
#       $HOME/.zpreztorc \
#       $HOME/.zprofile  \
#       $HOME/.zshenv    \
#       $HOME/.zshrc     \
#       $HOME/.zsh

# ln -s $DOTS/zsh/zlogin            $HOME/.zlogin
# ln -s $DOTS/zsh/zlogout           $HOME/.zlogout
# ln -s $DOTS/zsh/zpreztorc         $HOME/.zpreztorc
# ln -s $DOTS/zsh/zprofile          $HOME/.zprofile
# ln -s $DOTS/zsh/zshenv            $HOME/.zshenv
# ln -s $DOTS/zsh/zshrc             $HOME/.zshrc
# ln -s $DOTS/zsh                   $HOME/.zsh

# # Link git configuration files
# echo "Linking Git configuration files..."
# rm -f $HOME/.gitconfig \
#       $HOME/.gitignore

# ln -s $DOTS/git/gitconfig         $HOME/.gitconfig
# ln -s $DOTS/git/gitignore         $HOME/.gitignore

# # Link Silver Searcher (Ag) configuration files
# echo "Linking Silver Searcher configuration files..."
# rm -f $HOME/.ignore

# ln -s $DOTS/ag/ignore           $HOME/.ignore


# # Link ruby configuration
# echo "Linking Ruby-related configurations..."
# mkdir -p  $HOME/.bundle
# rm  -rf   $HOME/.bundle/config \
#           $HOME/.gemrc         \
#           $HOME/.pryrc         \
#           $HOME/.rubocop.yml   \
#           $HOME/.reek

# ln -s $DOTS/ruby/bundler          $HOME/.bundle/config
# ln -s $DOTS/ruby/gemrc            $HOME/.gemrc
# ln -s $DOTS/ruby/pryrc            $HOME/.pryrc
# ln -s $DOTS/ruby/rubocop.yml      $HOME/.rubocop.yml
# ln -s $DOTS/ruby/reek.yml         $HOME/.reek

# # Link vim configuration
# echo "Linking vim configuration files..."
# rm  -rf $HOME/.vim     \
#         $HOME/.vimrc   \
#         $HOME/.gvimrc

# ln -s $DOTS/vim                   $HOME/.vim
# ln -s $DOTS/vim/settings/vimrc    $HOME/.vimrc
# ln -s $DOTS/vim/settings/gvimrc   $HOME/.gvimrc

# echo "Installing Vim plugins..."
# vim +PlugInstall +qall

# # Link tmux configuration
# echo "Linking tmux configuration files..."
# rm -rf $HOME/.tmux.conf
# ln -s  $DOTS/tmux/tmux.conf $HOME/.tmux.conf

# # Link karabiner configuration
# echo "Linking Karabiner configuration files..."
# rm -rf $HOME/.config/karabiner
# mkdir -p $HOME/.config
# ln -s  $DOTS/karabiner $HOME/.config/karabiner

# # BitBar shared env
# echo "Setting up BitBar..."
# if [[ ! -a $DOTS/bitbar/shared/env.sh ]]
# then
#   echo "  - Copying example environment file into place"
#   cp $DOTS/bitbar/shared/env.sh.example $DOTS/bitbar/shored/env.sh
# fi

# Print Manual Instructions
echo "\n\nATTENTION! Further Instructions:\n"

echo "  * Set ZShell as your login shell"
echo "    - run \`chsh\`"
echo "    - enter your password"
echo "    - type '/bin/zsh' at the prompt"

# iTerm2
echo "  * Set iTerm configuration to load config"
echo "    - Open iTerm preferences"
echo "    - Check \"Load preferences from a user-defined folder or URL\""
echo "    - Put in $DOTS/iterm2"

# zsh:foldenable:foldmethod=marker:ft=zsh;ts=2;sts=2;sw=2
