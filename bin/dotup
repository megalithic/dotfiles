#!/usr/bin/env zsh

echo '

==================================================================================

    ┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
    │││├┤ │ ┬├─┤│  │ │ ├─┤││   :: dots & things
    ┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
    @megalithic

    Setting up dotfiles. If the ~/.dotfiles folder does not exist, it will be
    cloned from https://github.com/megalithic/dotfiles.

==================================================================================
'

# Detect OS
if [[ -z $PLATFORM ]]
then
  # unamestr=`uname`
  platform="unknown"

  if [[ "$(uname)" == "Darwin" ]]; then
    platform="macos"
  elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
    platform="linux"
  elif [[ "$(expr substr $(uname -s) 1 5)" == 'FreeBSD' ]]; then
    platform='freebsd'
  elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
    platform="windows"
  fi

  export PLATFORM=$platform
  
  echo ":: setting PLATFORM to $platform"
fi

# DOTDIR export exists?
if [[ -z $DOTS ]]
then
  export DOTS="$HOME/.dotfiles"
  echo ":: setting DOTS to $DOTS"
  export DOTDIR="$HOME/.dotfiles"
  echo ":: setting DOTDIR to $DOTDIR"
  export DIRDOTS="$HOME/.dotfiles"
  echo ":: setting DIRDOTS to $DIRDOTS"
fi

# PRIVATES export exists?
if [[ -z $PRIVATES ]]
then
  export PRIVATES="$DOTS/private"
  echo ":: setting PRIVATES to $PRIVATES"
  export PRIVATE="$DOTS/private"
  echo ":: setting PRIVATE to $PRIVATE"  
fi

# git exists?
if (which git &>/dev/null); then
  echo ":: git already installed; skipping."
else
  echo ":: git not installed; requires xcode to continue.. install xcode? [y]"
  read answer

  if [[ $answer == [yY] ]]
  then
    echo ":: installing xcode"
    xcode-select --install
  fi
fi

# ~/.dotfiles dir exists?
if [[ ! -d $DOTS ]]
then
  echo ":: cloning dotfiles..."
  mkdir -p $DOTS
  git clone --recursive git://github.com/megalithic/dotfiles.git "$DOTS"
else
  if [[ -z $SKIP_DOTFILES_UPDATE ]]
  then
    echo ":: ~/.dotfiles found; updating to latest.."
    cd $DOTS
    git add -u .
    git stash
    git pull --recurse-submodules --rebase origin master
    git push origin master
    git stash pop
    cd $HOME
  fi
fi

# Install Homebrew
if (which brew &>/dev/null); then
  echo ":: brew already installed; skipping."
else
  echo ":: brew not found; installing Homebrew..."
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

echo ":: brewing things from our brewfile..."
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
brew update

echo ":: in order to install mas apps, you must manually signin to the Apple App Store (AAS); press any key to continue."; read -k1 -s
brew bundle --file="$DOTS/homebrew/Brewfile"

# echo ":: doing post-brew things..."
# sudo xcodebuild -license accept
# ln -sfv /usr/local/bin/gcc-4.9 /usr/local/bin/gcc

# Run generic installers
$DOTS/bin/generic

# Run platform-based installers (macos, linux, windows, freebsd)
$DOTS/bin/platform

# Symlink all the things
$DOTS/bin/symlinks

# Setup private repo and things
$DOTS/bin/private

echo ":: changing your shell to the brewed zsh..."
zsh_path=$(which zsh)
echo ":: attempting to set $zsh_path as your zsh path in /etc/shells"
grep -Fxq "$zsh_path" /etc/shells || sudo bash -c "echo $zsh_path >> /etc/shells"
chsh -s "$zsh_path" $USER
zsh

# Print Manual Instructions
echo "\n\nATTENTION! Further Instructions:\n"

echo "  * Set ZShell as your login shell"
echo "    - run \`chsh\`"
echo "    - enter your password"
echo "    - type '/bin/zsh' at the prompt"

# zsh:foldenable:foldmethod=marker:ft=zsh;ts=2;sts=2;sw=2
