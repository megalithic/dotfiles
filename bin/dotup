#!/bin/bash

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

[[ -f "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh" ]] && source "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh"

set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

pushd "$DOTS"

# gather sudo privileges:
log_warn "Some setup methods require the administrator password. Please grant sudo access:"
sudo -v

# Keep-alive: update existing `sudo` time stamp until setup has finished
while true; do
  sudo -n true
  sleep 60
  kill -0 "$$" || exit
done 2>/dev/null &

# update steps:
# - submodules
# - dotbot create
# - dotbot link
# - asdf / lib + plugins + default tool plugins + list caches (https://www.notion.so/Droplet-Ubuntu-Upgrade-0bacdb0df2344225b243362982d0c861)
# - homebrew / lib + outdated
# - nvim
# - paq
# - (macos) elixirls
# - (macos) kitty icon update
# - (linux/seth-dev) remote-dev update
# - (linux/seth-dev) dev update

log "update git submodules.." &&
  git submodule update --init --recursive
log "create missing folders and symlinks.." &&
  ./install --only create link
log "asdf.." &&
  ./bin/asdf-install -u
log "homebrew.." &&
  ./bin/brew-install -u
log "post-homebrew (remove ruby).." &&
  brew uninstall --ignore-dependencies --force ruby
log "neovim.." &&
  ./bin/nvim-install -u
log "paq-nvim.." &&
  ./bin/paq-install -u
log "elixir-ls.." &&
  ./bin/elixirls-install master
log "kitty icon update.." &&
  ./config/kitty/update_icon.sh
log "github login.." &&
  ./bin/gh-login

popd
