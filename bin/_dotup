#!/usr/bin/env zsh

set -e

trap 'clean_exit $? $LINENO' EXIT

function log {
    printf '%s%s\n%s' $(tput setaf 4) "$*" $(tput sgr 0)
}

function log_ok {
    printf '%s[%s] %s\n%s' $(tput setaf 2) "$(date '+%x %X')" "$*" $(tput sgr 0)
}

function log_warn {
    printf '%s%s[%s] %s\n%s' $(tput bold) $(tput setaf 3) "$(date '+%x %X')" "$*" $(tput sgr 0)
}

function log_error {
    printf '%s%s[%s] %s\n%s' $(tput bold) $(tput setaf 1) "$(date '+%x %X')" "$*" $(tput sgr 0)
}

function clean_exit {
    set +x
    if [[ "$1" != "0" ]]; then
        log_error "Fatal error code \"${1}\" occurred on line \"${2}\""
    fi
}


log '

==================================================================================

┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
│││├┤ │ ┬├─┤│  │ │ ├─┤││   :: dots & things
┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
@megalithic

Setting up dotfiles. If the ~/.dotfiles folder does not exist, it will be
cloned from https://github.com/megalithic/dotfiles.

==================================================================================
'


log_warn "-> some steps require sudo; please grant access:"
sudo -v


# Keep-alive: update existing `sudo` time stamp until setup has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


function keep_awake {
    log "-> caffinating macos.."
    caffeinate -d -i -m -u &
    caffeinatepid=$!
    log_ok "-> caffinated under process id: $caffeinatepid"
}

# Detect OS
function detect_platform {
    if [[ -z $PLATFORM ]]
    then
        log "-> setting PLATFORM env"
        # unamestr=`uname`
        platform="unknown"

        if [[ "$(uname)" == "Darwin" ]]; then
            platform="macos"
        elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
            platform="linux"
        elif [[ "$(expr substr $(uname -s) 1 5)" == 'FreeBSD' ]]; then
            platform='freebsd'
        elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
            platform="windows"
        fi

        export PLATFORM=$platform

        log_ok "-> set PLATFORM to $platform"
    fi
}

function export_dirs {
    # DOTDIR export exists?
    if [[ -z $DOTS ]]
    then
        log "-> setting DOTS env"
        export DOTS="$HOME/.dotfiles"
        log_ok "-> set DOTS to $DOTS"
        export DOTDIR="$HOME/.dotfiles"
        log_ok "-> set DOTDIR to $DOTDIR"
        export DIRDOTS="$HOME/.dotfiles"
        log_ok "-> set DIRDOTS to $DIRDOTS"
    fi

    # PRIVATES export exists?
    if [[ -z $PRIVATES ]]
    then
        log "-> setting PRIVATES env"
        export PRIVATES="$DOTS/private"
        log_ok "-> set PRIVATES to $PRIVATES"
        export PRIVATE="$DOTS/private"
        log_ok "-> set PRIVATE to $PRIVATE"
    fi
}

function setup_xcode_and_git {
    check=$( pkgutil --pkgs | grep com.apple.pkg.CLTools_Executables | wc -l | awk '{ print $1 }' )
    if [[ "$check" != 1 ]]
    then
        sleep 1
        log "-> installing xcode cli tools..."; read -k1 -s
        xcode-select --install && sudo xcodebuild -license accept && softwareupdate -ia
        log_ok "-> DONE"
    fi
}

function _do_clone {
    log "-> cloning dotfiles..."
    mkdir -p $DOTS
    git clone --recursive git://github.com/megalithic/dotfiles.git "$DOTS"
    log_ok "-> DONE"
}

function clone_dotfiles_repo {
    if [[ ! -d $DOTS ]]
    then
        _do_clone
    else
        if [[ -z $SKIP_DOTFILES_UPDATE ]]
        then
            if ls -A $DOTS | grep -q '^'; then
                log "-> ~/.dotfiles found; updating to latest.."
                cd $DOTS
                git stash
                git fetch
                git merge origin/main
                git pull origin main
                # git stash pop
                log_ok "-> finished fetching and merging latest"
                cd $HOME
            else
                log_warn "-> ~/.dotfiles exists, but is empty; retrying clone.."
                rm -rf $DOTS
                _do_clone
            fi
        fi
    fi
}

# Install Homebrew
function install_homebrew {
    if (command -v brew &> /dev/null); then
        log "-> brew already installed; skipping."
    else
        log_warn "-> brew not found; installing Homebrew..."
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        log_ok "-> DONE"
    fi
}

function bundle_brews {
    log "-> brewing things from our brewfile..."
    export HOMEBREW_CASK_OPTS="--appdir=/Applications"

    # if we're not signed in, let's open the App Store
    if [[ $(mas account | grep "Not signed in") ]]
    then
        sleep 1
        open -a "App Store"
        log_warn "-> in order to install mas apps, you must manually signin to the Apple App Store (AAS); press any key to continue."; read -k1 -s
    fi

    brew bundle --file="$DOTS/Brewfile" || { log_error 'brew bundling failed'; exit 1; }
    log_ok "-> DONE"

    # log "-> post-brewing operations.."
    # $(brew --prefix)/opt/fzf/install            # <- fzf
    # initdb /usr/local/var/postgres -E utf8      # <- postgresql
    # log_ok "-> DONE"
}

function stow_away {
    log "-> stowing things..."
    cd $DOTS
    stow terminfo && log_ok "stowed terminfo"
    stow asdf && log_ok "stowed asdf"
    stow kitty && log_ok "stowed kitty"
    stow fish && log_ok "stowed fish"
    stow zsh && log_ok "stowed zsh"
    stow git && log_ok "stowed git"
    stow tmux && log_ok "stowed tmux"
    stow langservers && log_ok "stowed langservers"
    stow nvim && log_ok "stowed nvim"
    stow keyboard && log_ok "stowed keyboard"
    defaults write org.hammerspoon.Hammerspoon MJConfigFile "~/.config/hammerspoon/init.lua" && stow hammerspoon && log_ok "stowed hammerspoon"
    stow misc && log_ok "stowed misc"
    cd -
    log_ok "-> DONE"
}

function setup_platform {
    log "-> running platform-specific ($platform) things..."
    sh "$DOTS/platform/$platform.sh"
    log_ok "-> DONE"
}

function setup_asdf {
    log "-> setting up asdf..."
    sh "$DOTS/asdf/$platform.sh"
    log_ok "-> DONE"
}

function setup_python {
    log "-> setting up python..."
    sh "$DOTS/python/$platform.sh"
    log_ok "-> DONE"
}

function setup_keyboard {
    log "-> setting up keyboard..."
    sh "$DOTS/keyboard/$platform.sh"
    log_ok "-> DONE"
}

function setup_terminfo {
    log "-> setting up terminfo..."
    sh "$DOTS/terminfo/$platform.sh"
    log_ok "-> DONE"
}

function setup_zsh {
    zsh_path=/usr/local/bin/zsh
    log "-> attempting to set $zsh_path as your zsh path in /etc/shells"
    grep -Fxq "$zsh_path" /etc/shells || sudo bash -c "echo $zsh_path >> /etc/shells"
    ln -sfv $HOME/.config/zsh/.zshenv $HOME/.zshenv
    source $HOME/.config/zsh/.zshenv
    # compaudit | xargs chmod g-w
    log "-> changing your shell to homebrew version: $zsh_path"
    chsh -s "$zsh_path" $USER && log_ok "-> DONE"
}

function setup_fish {
    # https://fishshell.com/docs/current/tutorial.html#switching-to-fish
    fish_path=/usr/local/bin/fish
    log "-> changing your shell to fish..."
    log "-> attempting to set $fish_path as your fish path in /etc/shells"
    echo "$fish_path" | sudo tee -a /etc/shells
    chsh -s "$fish_path" $USER && log_ok "-> DONE"
}


# -- engage!

detect_platform
if [[ "$platform" == "macos" ]]
then
    keep_awake
fi

export_dirs
if [[ "$platform" == "macos" ]]
then 
    setup_xcode_and_git
fi
clone_dotfiles_repo
if [[ "$platform" == "macos" ]] 
then 
    install_homebrew
    bundle_brews
fi

stow_away
setup_zsh
setup_platform
setup_asdf
setup_terminfo
setup_keyboard
setup_python


kill "$caffeinatepid"
log_ok "-> DONE with $platform setup!"
exit 0

#ft=zsh:foldenable:foldmethod=marker:ft=zsh;ts=2;sts=2;sw=2
