#!/usr/bin/env zsh

echo '

==================================================================================

┌┬┐┌─┐┌─┐┌─┐┬  ┬┌┬┐┬ ┬┬┌─┐
│││├┤ │ ┬├─┤│  │ │ ├─┤││   :: dots & things
┴ ┴└─┘└─┘┴ ┴┴─┘┴ ┴ ┴ ┴┴└─┘
@megalithic

Setting up dotfiles. If the ~/.dotfiles folder does not exist, it will be
cloned from https://github.com/megalithic/dotfiles.

==================================================================================
'

# -- REFs
# neat things for echo'ing colors
# https://github.com/ctaylo21/jarvis/blob/master/install.sh#L3
# $(tput setaf 2)JARVIS: Greetings. Preparing to power up and begin diagnostics.$(tput sgr 0)


set -e


trap 'clean_exit $? $LINENO' EXIT


function log {
    printf '[%s] %s\n' "$(date '+%x %X')" "$*"
}

function clean_exit {
    set +x
    if [[ "$1" != "0" ]]; then
        log "Fatal error code \"${1}\" occurred on line \"${2}\""
    fi
}


log "Some setup methods require the administrator password. Please grant sudo access:"
sudo -v


# Keep-alive: update existing `sudo` time stamp until setup has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &


# Detect OS
if [[ -z $PLATFORM ]]
then
    # unamestr=`uname`
    platform="unknown"

    if [[ "$(uname)" == "Darwin" ]]; then
        platform="macos"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
        platform="linux"
    elif [[ "$(expr substr $(uname -s) 1 5)" == 'FreeBSD' ]]; then
        platform='freebsd'
    elif [[ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
        platform="windows"
    fi

    export PLATFORM=$platform

    echo "-> setting PLATFORM to $platform"
fi

# DOTDIR export exists?
if [[ -z $DOTS ]]
then
    export DOTS="$HOME/.dotfiles"
    echo "-> setting DOTS to $DOTS"
    export DOTDIR="$HOME/.dotfiles"
    echo "-> setting DOTDIR to $DOTDIR"
    export DIRDOTS="$HOME/.dotfiles"
    echo "-> setting DIRDOTS to $DIRDOTS"
fi

# PRIVATES export exists?
if [[ -z $PRIVATES ]]
then
    export PRIVATES="$DOTS/private"
    echo "-> setting PRIVATES to $PRIVATES"
    export PRIVATE="$DOTS/private"
    echo "-> setting PRIVATE to $PRIVATE"
fi

# git exists?
if (which git &>/dev/null); then
    echo "-> git already installed; skipping."
else
    echo "-> git not installed; requires xcode to continue.. install xcode? [y]"
    read answer

    if [[ $answer == [yY] ]]
    then
        echo "-> installing xcode"
        xcode-select --install && \
            sudo xcodebuild -license accept && \
            softwareupdate -ia
    fi
fi

function do_clone {
    echo "-> cloning dotfiles..."
    mkdir -p $DOTS
    git clone --recursive git://github.com/megalithic/dotfiles.git "$DOTS"
}


# ~/.dotfiles dir exists?
if [[ ! -d $DOTS ]]
then
    do_clone
else
    if [[ -z $SKIP_DOTFILES_UPDATE ]]
    then
        if ls -A $DOTS | grep -q '^'; then
            echo "-> ~/.dotfiles found; updating to latest.."
            cd $DOTS
            # git add -u .
            # git stash
            # git pull --recurse-submodules --rebase origin main
            # git fetch origin; git merge origin/main
            # TODO: need to figure out how to do this only when i've got perms
            # git push origin main
            # git stash pop
            cd $HOME
        else
            echo "-> ~/.dotfiles exists, but is empty; retrying clone.."
            rm -rf $DOTS
            do_clone
        fi
    fi
fi

# Install Homebrew
if (which brew &>/dev/null); then
    echo "-> brew already installed; skipping."
else
    echo "-> brew not found; installing Homebrew..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

echo "-> brewing things from our brewfile..."
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
brew update

echo "-> in order to install mas apps, you must manually signin to the Apple App Store (AAS); press any key to continue."; read -k1 -s
open -a "App Store"

brew bundle --file="$DOTS/homebrew/Brewfile"

# FIXME: is this still needed?
# echo ":: doing post-brew things..."
# sudo xcodebuild -license accept
# ln -sfv /usr/local/bin/gcc-4.9 /usr/local/bin/gcc

# Run generic installers
$DOTS/bin/_generic

# Run platform-based installers (macos, linux, windows, freebsd)
$DOTS/bin/_platform

# Symlink all the things
$DOTS/bin/_symlinks

# Setup private repo and things
# $DOTS/bin/_private

echo "-> changing your shell to the brewed version of zsh..."
zsh_path=$(which zsh)
echo "-> attempting to set $zsh_path as your zsh path in /etc/shells"
grep -Fxq "$zsh_path" /etc/shells || sudo bash -c "echo $zsh_path >> /etc/shells"
chsh -s "$zsh_path" $USER
zsh

# Print Manual Instructions
echo "\n\nATTENTION! Further Instructions:\n"

echo "  * Because I'm not totally great with scripting all the things.."
echo "    - you might have to reinstall `weechat` since original deps weren't there"
echo "    - private repo things are horribly broke for automation; best bet is to try manually cloning, or you might have to download the zip archive"

#ft=zsh:foldenable:foldmethod=marker:ft=zsh;ts=2;sts=2;sw=2
