#!/bin/bash

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

[[ -f "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh" ]] && source "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh"

set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

FORCE_INSTALL="false"

pushd "${XDG_DATA_HOME}/src" >/dev/null && log_ok "cd ~/.local/share/src successful"

remove_brew_nvim() {
  if brew ls --versions neovim >/dev/null; then
    read -p "$(tput bold)$(tput setaf 5)[?] remove homebrew version of neovim (Y/n)?$(tput sgr 0) " yn
    case $yn in
      [Yy]*)
        brew uninstall -f --ignore-dependencies neovim neovim-remote || exit 1
        ;;
      "")
        brew uninstall -f --ignore-dependencies neovim neovim-remote || exit 1
        ;;
      [Nn]*)
        log_warn "opted out of homebrew neovim removal"
        ;;
      *)
        log_warn "please answer [y]es or [n]o."
        exec $__invocation
        ;;
    esac
  fi
}

update() {
  cd "${XDG_DATA_HOME}/src/neovim" && log_ok "cd neovim successful"
  git checkout master && log_ok "git checkout master successful"
  git fetch && log_ok "git fetch successful"
  git log --color --pretty=oneline --abbrev-commit HEAD@{1}.. | sed 's/^/  /'
}

clone() {
  if [[ ! -d "${XDG_DATA_HOME}/src/neovim" ]]; then
    git clone git@github.com:neovim/neovim.git && log_ok "git clone neovim successful"
    cd neovim && log_ok "cd neovim successful"
    # do it all and then exit cleanly...
    update && build && remove_brew_nvim && popd >/dev/null && exit 0
  fi
}

do_build() {
  git up && log_ok "git up successful"

  # TODO: do we need to reinstall these each time??
  if [[ $PLATFORM == "linux" ]]; then
    # REF: https://github.com/neovim/neovim/wiki/Building-Neovim#ubuntu--debian
    sudo apt-get install ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip curl doxygen
  elif [[ $PLATFORM == "macos" ]]; then
    # REF: https://github.com/neovim/neovim/wiki/Building-Neovim#macos--homebrew
    brew install ninja libtool automake cmake pkg-config gettext curl
  fi

  if [[ -d "${XDG_DATA_HOME}/src/neovim/.deps" ]]; then
    sudo rm -rf "${XDG_DATA_HOME}/src/neovim/.deps" && log_ok "remove .deps successful"
  fi

  sudo make CMAKE_BUILD_TYPE=RelWithDebInfo || exit 1 && log_ok "make successful"
  sudo make install || exit 1 && log_ok "successfully built and installed neovim"

  log "installing neovim-remote via python (pip3).."
  pip3 install neovim-remote
}

build() {
  if [[ $(git rev-parse HEAD) == $(git rev-parse @{u}) && $FORCE_INSTALL == "false" ]]; then
    log_warn "neovim already up to date on origin/master; skipping."
  else
    read -p "$(tput bold)$(tput setaf 5)[?] build neovim from source (Y/n)?$(tput sgr 0) " yn
    case $yn in
      [Yy]*)
        do_build || exit 1
        ;;
      "")
        do_build || exit 1 # default
        ;;
      [Nn]*)
        log_warn "opted out of neovim install"
        ;;
      *)
        log_warn "please answer [y]es or [n]o."
        exec $__invocation
        ;;
    esac
  fi
}

while getopts "f" OPTION; do
  case $OPTION in

    f)
      FORCE_INSTALL="true"
      ;;

    \?)
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;

  esac
done
shift $((OPTIND - 1))

clone && update && build && remove_brew_nvim popd >/dev/null
