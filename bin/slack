#!/usr/bin/env bash

#
# What in tarnation is this?
#
# CLI tool to control slack status and presence
#
# slack [options] [STATUS_NAME | FUZZY_PATTERN]
#
# Running `slack` with no argument will let you fuzzy-find pre-defined statuses
#
# Dependencies:
#   Required: `fzf`, `jq`, ENV variables (see source below)
#   Optional: `spinner` from my dotfiles' bin dir
#

set -euo pipefail

# TODO: figure out how to better use exit trapping
# ----
# trap 'clean_exit $? $LINENO' EXIT
# trap ctrl_c INT # trap ctrl-c and call ctrl_c()

# function clean_exit {
# 	set +x
# 	if [[ $1 != "0" ]]; then
# 		printf -- "FATAL error code %s occurred on line %s" "$1" "$2"
# 	fi
# }

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

POPUP="false"
VERBOSE="false"
DEBUG="false"

# -- ENV vars
CHANNEL_ID=${OUTSTAND_AWAY_CHAN_ID:-}
SLACK_TOKEN=${OUTSTAND_TOKEN:-}
SLACK_USER=${OUTSTAND_USER:-}

# -- internal vars
api_url="https://slack.com/api"
spinner_path="$HOME/.dotfiles/bin/spinner"
statuses="away
brb
lunch
coffee
tea
dog
errand
pair
zoom
meeting
dnd
focus
back
here
"

# -- checks for needed dependencies
(command -v fzf &>/dev/null) && FZF_FOUND="installed" || FZF_FOUND="not installed"
(command -v jq &>/dev/null) && JQ_FOUND="installed" || JQ_FOUND="not installed"
[[ -x "$spinner_path" ]] && SPINNER_FOUND="installed" || SPINNER_FOUND="not installed"

[[ $SPINNER_FOUND == "installed" ]] && spinner="$spinner_path" || spinner="echo '.'"

function __help() {
	printf -- "Usage: %s [options] [STATUS | FUZZY_PATTERN]\n" "$__base"
	printf -- "\n"
  printf -- "   Statuses:\n"
	printf -- "     away              Set presence to away, and profile for being gone\n"
	printf -- "     lunch             Set presence to away, and profile for lunch\n"
	printf -- "     coffee            Set presence to away, and profile for coffee\n"
	printf -- "     tea               Set presence to away, and profile for tea\n"
	printf -- "     dog               Set presence to away, and profile for dog walking\n"
	printf -- "     errand            Set presence to away, and profile for running errand\n"
	printf -- "     pair              Set DND to on, and profile for pairing\n"
	printf -- "     zoom              Set DND to on, and profile for zoom/meeting\n"
	printf -- "     dnd               Set DND to on, and profile for DND/focus\n"
	printf -- "     focus             Set DND to on, and profile for DND/focus\n"
	printf -- "     back              Set presence to auto, and profile accordingly\n"
	printf -- "     here              Set presence to auto, and profile accordingly\n"
	printf -- "\n"
	printf -- "   Options:\n"
	printf -- "     -p                Run fzf normally for tmux' popup feature, else fzf-tmux\n"
	printf -- "     -h                This help text you're presently reading. üòÑ\n"
	printf -- "\n"
	printf -- "   Dependencies:\n"
	printf -- "     fzf               ($FZF_FOUND)\n"
	printf -- "     jq                ($JQ_FOUND)\n"
	printf -- "     spinner           ($SPINNER_FOUND)\n"
	printf -- "\n"
}

function __info() {
	printf -- "%s executation details:\n" "$__base"
	printf -- "---------------------------------------------------\n"
	printf -- "fzf:          %s\n" "$fzf_cmd"
	printf -- "curl:         %s\n" "$curl_cmd"
	printf -- "cwd:          %s\n" "$__dir"
	printf -- "filepath:     %s\n" "$__file"
	printf -- "basename:     %s\n" "$__base"
	printf -- "root:         %s\n" "$__root"
	printf -- "invocation:   %s\n" "$__invocation"
	printf -- "\n"
}

# -- halt if we don't have jaq installed
if [[ $JQ_FOUND == "not installed" ]]; then
	printf -- "ERROR: %s requires jq to be installed" "$__base"
	__help
	exit 1
fi

while getopts "phdv" OPTION; do
	case $OPTION in

		p)
			POPUP="true"
			shift
			;;

		h)
			__help
      exit
			;;

		d)
			DEBUG="true"
			shift
			;;

		v)
			VERBOSE="true"
			shift
			;;

	esac
done

# -- first param passed in, after options
status="${1:-}"

# -- handle options
[[ $VERBOSE == "true" || $DEBUG == "true" ]] && curl_cmd="curl --verbose" || curl_cmd="curl --silent"
[[ $POPUP == "true" ]] && fzf_cmd="fzf" || fzf_cmd="fzf-tmux"

declare -a request_data

# -- PRIVATE
function __request() {
  local feature=${1:-}

  request_data+=("token=$SLACK_TOKEN")

  local data=$(printf -- "--data %s\n" "${request_data[@]}")
  # TODO: what's this for? `2>&1`
  request_cmd="$curl_cmd --show-error --include -X POST "${data}" "$api_url/$feature""
  [[ $VERBOSE == "true" || $DEBUG == "true" ]] && echo "executing request: $request_cmd" && echo

  if [[ $DEBUG == "true" ]]; then
    exec $request_cmd | $spinner || {
      echo 'failed to make slack request'
      exit 1
    }
  else
    exec $request_cmd &>/dev/null | $spinner || {
      echo 'failed to make slack request'
      exit 1
    }
  fi

  unset request_data
}

function __set_status() {
  local text="$(printf %s "${1:-}" | jq -sRr @uri)"
  local emoji="$(printf %s "${2:-}" | jq -sRr @uri)"
  local profile="{\"status_text\":\"${text}\",\"status_emoji\":\"${emoji}\"}"
  request_data+=("profile=${profile}")
	__request "users.profile.set"
}

function __end_status() {
  local profile="{\"status_text\":\"\",\"status_emoji\":\"\"}"
  request_data+=("profile=${profile}")
	__request "users.profile.set"
}

function __set_presence() {
  local presence="$1"
  request_data+=("presence=$presence")
	__request "users.setPresence"
}

function __set_dnd() {
  local dnd_mins="${1:-}"
  request_data+=("num_mins=$dnd_mins")
	__request "dnd.setSnooze"
}

function __end_dnd() {
  request_data+=("num_mins=0")
	__request "dnd.endDnd"
}


function __set_chan_text() {
  # HT for `jq`: https://stackoverflow.com/a/34407620/213904
  local text="$(printf %s "${1:-}" | jq -sRr @uri)"
  request_data+=("channel=$CHANNEL_ID" \
    "as_user=$SLACK_USER" \
    "text=$text")
	__request "chat.postMessage"
}

# -- PUBLIC
function away() {
	__set_presence "away"
	__set_status "..afk.." ":afk:"
  __set_chan_text "bbl"
}

function brb() {
	__set_presence "away"
	__set_status "..be right back.." ":brb:"
  __set_chan_text "brb"
}

function lunch() {
	__set_presence "away"
	__set_status "..lunch.." ":pizza:"
  __set_chan_text "bbl, lunch"
}

function errand() {
	__set_presence "away"
	__set_status "..running an errand.." ":car:"
  __set_chan_text "bbiab, running an errand"
}

function coffee() {
	__set_presence "away"
	__set_status "..covfefe.." ":coffee:"
  __set_chan_text "brb, coffee"
}

function tea() {
	__set_presence "away"
	__set_status "..tea.." ":tea:"
  __set_chan_text "brb, tea"
}

function dog() {
	__set_presence "away"
	__set_status "..walking the puppers.." ":doge:"
  __set_chan_text "bbiab, walking the puppers"
}

function gone() {
	__set_presence "away"
	__end_status
  __set_chan_text ":wave: have a good one!"
	__set_dnd "930"
}

function pair() {
	__set_status "..pairing.." ":pear:"
	__set_dnd "120"
}

function zoom() {
	__set_status "..on a call.." ":calendar:"
	__set_dnd "120"
}

function dnd() {
	__set_status "..deep work focus time.." ":octagonal_sign:"
	__set_dnd "240"
}

function here() {
	__set_presence "auto"
	__end_status
  __set_chan_text ":wave: :sunrise_over_mountains: good day!"
	__end_dnd
}

function back() {
	__set_presence "auto"
	__end_status
  __set_chan_text "back"
	__end_dnd
}

function log() {
  local given_status="$1"
  printf "\n[%s] at %s... \r\n" "$given_status" "$(date)"
}

function do_status() {
  local given_status="$1"

  ${given_status} "$@"
  log "$given_status"

  exit
}

[[ $VERBOSE == "true" || $DEBUG == "true" ]] && __info

# if we pass in a status, use it directly
if [[ $status ]]; then
  do_status "$status"
else
  # otherwise, fuzzy-find based upon our supported statuses; if fzf installed
  if [[ $FZF_FOUND == "installed" ]]; then
    selected_status="$(echo "$statuses" | $fzf_cmd --reverse --exit-0 --prompt="Ô¶∞select slack status ÔÅî " --header="ÔÜò supported slack statuses" --bind="enter:replace-query+print-query" --preview-window="hidden")"
    [[ -n "$selected_status" ]] && do_status "$selected_status"
  else
    printf -- "ERROR: %s requires FZF to be installed for fuzzy finding statuses" "$__base"
    __help
    exit 1
  fi
fi
