#!/usr/bin/env bash
# shellcheck shell=bash

#
# What in tarnation is this?
#
# CLI tool to control slack status and presence
#
# slack [options] [STATUS_NAME | FUZZY_PATTERN]
#
# Running `slack` with no argument will let you fuzzy-find pre-defined statuses
#
# Dependencies:
#   Required: `fzf`, `jq`, `curl`, `httpie`, ENV variables (see source below)
#   Optional: `spinner`, `tmux-slack` from my dotfiles' bin dir
#
# FIXME: we've gone way out of control now; get curl or httpie working; don't use
# both, please. Confirm you only need one or the other and kill the other.

# set -x
set -euo pipefail

# TODO: figure out how to better use exit trapping
# ----
# trap 'clean_exit $? $LINENO' EXIT
# trap ctrl_c INT # trap ctrl-c and call ctrl_c()

# function clean_exit {
# 	set +x
# 	if [[ $1 != "0" ]]; then
# 		printf -- "FATAL error code %s occurred on line %s" "$1" "$2"
# 	fi
# }

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "${__file}" .sh)"
# __base="${(%):-%x}"
# __base="slack"
# __root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
# __invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

POPUP="false"
VERBOSE="false"
DEBUG="false"
SILENT="false"

# -- ENV vars
CHANNEL_ID=${OUTSTAND_AWAY_CHAN_ID:-}
SLACK_TOKEN=${OUTSTAND_TOKEN:-}
SLACK_USER=${OUTSTAND_USER:-}
GENERAL_CHANNEL_ID=${OUTSTAND_GENERAL_CHAN_ID:-}

# -- internal vars
api_url="https://slack.com/api"
spinner_path="$HOME/.dotfiles/bin/spinner"
tmux_slack_path="$HOME/.dotfiles/bin/tmux-slack"
statuses="away
back
brb
coffee
dnd
dog
run
errand
focus
gone
here
lunch
meeting
pair
tea
zoom
"
api_cmd="http" # or curl
http_cmd=""
request_format="--json" # or --form

# -- checks for needed dependencies
(command -v "$(which curl)" &>/dev/null) && CURL_FOUND="installed" || CURL_FOUND="not installed"
(command -v /usr/local/bin/fzf &>/dev/null) && FZF_FOUND="installed" || FZF_FOUND="not installed"
(command -v /usr/local/bin/jq &>/dev/null) && JQ_FOUND="installed" || JQ_FOUND="not installed"
(command -v /usr/local/bin/http &>/dev/null) && HTTPIE_FOUND="installed" || HTTPIE_FOUND="not installed"
[[ -x $spinner_path ]] && SPINNER_FOUND="installed" || SPINNER_FOUND="not installed"
[[ -x $tmux_slack_path ]] && TMUX_SLACK_FOUND="installed" || TMUX_SLACK_FOUND="not installed"

[[ $SPINNER_FOUND == "installed" ]] && spinner="$spinner_path"

function __help() {
  printf -- "Usage: %s [options] [STATUS | FUZZY_PATTERN]\n" "$__base"
  printf -- "\n"
  printf -- "   Statuses:\n"
  printf -- "     away              Set presence to away, and profile for being gone\n"
  printf -- "     lunch             Set presence to away, and profile for lunch\n"
  printf -- "     coffee            Set presence to away, and profile for coffee\n"
  printf -- "     tea               Set presence to away, and profile for tea\n"
  printf -- "     dog               Set presence to away, and profile for dog walking\n"
  printf -- "     errand            Set presence to away, and profile for running errand\n"
  printf -- "     pair              Set DND to on, and profile for pairing\n"
  printf -- "     zoom              Set DND to on, and profile for zoom/meeting\n"
  printf -- "     dnd               Set DND to on, and profile for DND/focus\n"
  printf -- "     focus             Set DND to on, and profile for DND/focus\n"
  printf -- "     back              Set presence to auto, and profile accordingly\n"
  printf -- "     here              Set presence to auto, and profile accordingly\n"
  printf -- "\n"
  printf -- "   Options:\n"
  printf -- "     -p                Run fzf normally for tmux' popup feature, else fzf-tmux\n"
  printf -- "     -h                This help text you're presently reading. 😄\n"
  printf -- "     -d                Set debugging to true \n"
  printf -- "     -s                Silent mode; don't message the channel on status change. 😄\n"
  printf -- "\n"
  printf -- "   Dependencies:\n"
  printf -- "     fzf               (%s)\n" "$FZF_FOUND"
  printf -- "     jq                (%s)\n" "$JQ_FOUND"
  printf -- "     curl              (%s)\n" "$CURL_FOUND"
  printf -- "     httpie            (%s)\n" "$HTTPIE_FOUND"
  printf -- "     spinner           (%s)\n" "$SPINNER_FOUND"
  printf -- "     tmux-slack        (%s)\n" "$TMUX_SLACK_FOUND"
  printf -- "\n"
}

function __info() {
  printf -- "%s executation details:\n" "$__base"
  printf -- "---------------------------------------------------\n"
  printf -- "fzf:          %s\n" "$fzf_cmd"
  printf -- "status:       %s\n" "$STATUS_PARAM"
  printf -- "curl:         %s\n" "$curl_cmd"
  printf -- "api:          %s\n" "$api_cmd"
  printf -- "httpie:       %s\n" "$http_cmd"
  # printf -- "cwd:          %s\n" "$__dir"
  # printf -- "filepath:     %s\n" "$__file"
  printf -- "basename:     %s\n" "$__base"
  # printf -- "root:         %s\n" "$__root"
  # printf -- "invocation:   %s\n" "$__invocation"
  printf -- "\n"
}

# -- halt if we don't have certain dependencies installed
if [[ $JQ_FOUND == "not installed" ]]; then
  printf -- "ERROR: %s requires jq to be installed" "$__base"
  __help
  exit 1
fi

if [[ $CURL_FOUND == "not installed" ]]; then
  printf -- "ERROR: %s requires curl to be installed" "$__base"
  __help
  exit 1
fi

if [[ $HTTPIE_FOUND == "not installed" ]]; then
  printf -- "ERROR: %s requires httpie to be installed" "$__base"
  __help
  exit 1
fi

# OPTERR=0
while getopts "phdvs" OPTION; do
  case $OPTION in

    p)
      POPUP="true"
      ;;

    s)
      SILENT="true"
      ;;

    h)
      __help
      exit 0
      ;;

    d)
      DEBUG="true"
      ;;

    v)
      VERBOSE="true"
      ;;

    \?)
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;

  esac
done
shift $((OPTIND - 1))

# -- first param passed in, after options
STATUS_PARAM="${1:-}"

# -- handle options
if [[ $VERBOSE == "true" || $DEBUG == "true" ]]; then
  curl_cmd="$(which curl) --verbose"
  http_cmd="/usr/local/bin/http -vv --all --debug"
else
  curl_cmd="$(which curl) --silent --output /dev/null"
  http_cmd="/usr/local/bin/http -qq"
fi

[[ $VERBOSE == "true" || $DEBUG == "true" ]] && [[ $POPUP == "true" ]] && fzf_cmd="fzf" || fzf_cmd="fzf-tmux"

declare -a request_data
declare -a gone_messages
declare -a lunch_emojis
declare -a here_messages

# -- PRIVATE
function __log() {
  local log_msg="${1:-slack status updates}"
  local status_text="${2:-}"

  local reset_color="\e[0m"
  local status_color

  if [[ $status_text == "ok" ]]; then
    status_color="\e[1;32m"
  elif [[ $status_text == "warn" ]]; then
    status_color="\e[1;33m"
  elif [[ $status_text == "error" ]]; then
    status_color="\e[1;31m"
  else
    status_color="\e[1;34m"
  fi

  printf -- "\n${status_color}[%s] ➜ %s ${reset_color}\n" "$(date '+%x %X')" "$log_msg"
}

function __request() {
  local feature=${1:-}
  local data

  [[ $VERBOSE == "true" || $DEBUG == "true" ]] && __log "new slack status activity: $STATUS_PARAM"
  if [[ $api_cmd == "http" ]]; then
    data=$(printf -- "%s " "${request_data[@]}")
    request_cmd="$http_cmd -A bearer -a $SLACK_TOKEN $request_format --response-charset=utf-8 --print=B POST "$api_url/$feature" ${data}"
  elif [[ $api_cmd == "curl" ]]; then
    request_data+=("token=$SLACK_TOKEN")
    data=$(printf -- "--data %s " "${request_data[@]}")
    request_cmd="$curl_cmd --show-error --include ${data}"$api_url/$feature""
  fi

  [[ $VERBOSE == "true" || $DEBUG == "true" ]] && __log "request_cmd used: $request_cmd"

  # if we're using POPUP mode in tmux; let's use our tmux-slack wrapper to send
  # the slack operations to a detached `slack` tmux session; quazi-async.
  if [[ $POPUP == "true" ]]; then
    tmux-slack "${request_cmd}" || {
      __log 'OOPS! Failed to make slack request' "error"
      exit 1
    }
  else
    __log 'Executing request command' "warn"
    /usr/local/bin/kitty @ --to tcp:localhost:45876 launch --type=background /usr/local/bin/zsh -ic "${request_cmd} &!" || {
      __log "OOPS! Failed to make slack request" "error"
      exit 1
    }
  fi

  unset request_data
  CHANNEL_ID=${OUTSTAND_AWAY_CHAN_ID:-}
}

function __set_status() {
  local text
  local emoji

  # curl:
  api_cmd="curl"
  text="$(printf %s "${1:-}" | /usr/local/bin/jq -sRr @uri)"
  emoji="$(printf %s "${2:-}" | /usr/local/bin/jq -sRr @uri)"
  local profile="{\"status_text\":\"${text}\",\"status_emoji\":\"${emoji}\"}"
  request_data+=("profile=${profile}")

  # httpie:
  # api_cmd="http"
  # text="${1:-}"
  # emoji="${2:-}"
  # # local profile="{\"status_text\": \"${text}\", \"status_emoji\": \"${emoji}\"}"
  # # request_data+=("profile='${profile}'")
  # request_data+=("profile[status_text]=\"${text}\"")
  # request_data+=("profile[status_emoji]=\"${emoji}\"")
  # request_format="--json"

  __request "users.profile.set"
}

function __end_status() {
  # curl:
  api_cmd="curl"
  local profile='{"status_text":"","status_emoji":""}'
  request_data+=("profile=${profile}")

  # httpie:
  # api_cmd="http"
  # # local profile='{"status_text": "", "status_emoji": ""}'
  # # request_data+=("profile='${profile}'")
  # request_data+=('profile[status_text]=""')
  # request_data+=('profile[status_emoji]=""')
  # request_format="--json"

  __request "users.profile.set"
}

function __set_presence() {
  local presence="$1"
  request_data+=("presence=$presence")
  # request_format="--form"
  api_cmd="curl"
  __request "users.setPresence"
}

function __set_dnd() {
  local dnd_mins="${1:-}"
  request_data+=("num_minutes=$dnd_mins")
  # request_format="--form"
  api_cmd="curl"
  __request "dnd.setSnooze"
}

function __end_dnd() {
  request_data+=("num_minutes=0")
  # request_format="--form"
  api_cmd="curl"
  __request "dnd.endDnd"
}

function __set_chan_text() {
  if [[ $SILENT == "false" ]]; then
    # HT for `jq`: https://stackoverflow.com/a/34407620/213904
    local text

    # curl:
    api_cmd="curl"
    text="$(printf %s "${1:-}" | /usr/local/bin/jq -sRr @uri)"
    request_data+=("channel=$CHANNEL_ID"
      "as_user=$SLACK_USER"
      "text=$text")

    # httpie:
    # api_cmd="http"
    # text="$(printf %s "${1:-}")"
    # request_data+=("channel=$CHANNEL_ID"
    #   "as_user=$SLACK_USER"
    #   "text=\"$text\"")
    # request_format="--form"

    __request "chat.postMessage"
  fi
}

# -- PUBLIC
function away() {
  __set_presence "away"
  __set_status "afk" ":afk:"
  __set_chan_text "bbl"
  hs -c "hs.spotify.pause()"
}

function brb() {
  __set_presence "away"
  __set_status "be right back" ":brb:"
  __set_chan_text "brb"
  hs -c "hs.spotify.pause()"
}

function lunch() {
  lunch_emojis[0]=":pizza:"
  lunch_emojis[1]=":burrito:"
  lunch_emojis[2]=":hamburger:"
  lunch_emojis[3]=":green_salad:"
  lunch_emojis[4]=":curry:"
  local rand=$((RANDOM % ${#lunch_emojis[@]}))

  __set_presence "away"
  __set_status "lunch" "${lunch_emojis[$rand]}"
  __set_chan_text "bbl, ${lunch_emojis[$rand]} lunch"
  unset lunch_emojis
  hs -c "hs.spotify.pause()"
}

function errand() {
  __set_presence "away"
  __set_status "running an errand" ":car:"
  __set_chan_text "bbiab, running an errand"
  hs -c "hs.spotify.pause()"
}

function coffee() {
  __set_presence "away"
  __set_status "covfefe" ":coffee:"
  __set_chan_text "brb, coffee"
  hs -c "hs.spotify.pause()"
}

function tea() {
  __set_presence "away"
  __set_status "tea" ":tea:"
  __set_chan_text "brb, tea"
  hs -c "hs.spotify.pause()"
}

function dog() {
  __set_presence "away"
  __set_status "walking the puppers" ":doge:"
  __set_chan_text "bbiab, walking the puppers"
  hs -c "hs.spotify.pause()"
}

function run() {
  __set_presence "away"
  __set_status "gone for a run" ":runner:"
  __set_chan_text "bbiab, gone for a run"
  hs -c "hs.spotify.pause()"
}

function gone() {
  gone_messages[0]=":call_me_hand: catch you all on the flippy flip!"
  gone_messages[1]=":wave: adios frens!"
  gone_messages[2]=":v: deuces!"
  local rand=$((RANDOM % ${#gone_messages[@]}))

  __set_presence "away"
  __end_status
  __set_dnd 930
  __set_chan_text "${gone_messages[$rand]}"
  unset gone_messages
  hs -c "hs.spotify.pause()"
}

function pair() {
  __set_status "pairing" ":pear:"
  __set_dnd 120
}

function zoom() {
  __set_status ":movie_camera: on a zoom call" ":calendar:"
  __set_dnd 120
}

function dnd() {
  __set_status "deep work focus time" ":octagonal_sign:"
  __set_dnd 120
}

function here() {
  here_messages[0]=":coffee:"
  # here_messages[0]=":wave: :sunrise_over_mountains: :coffee: top o the mornin!"
  # here_messages[1]=":coffee: :croissant: gluten morgen!"
  # here_messages[2]=":coffee: :tea: good morning!"
  local rand=$((RANDOM % ${#here_messages[@]}))

  __set_presence "auto"
  __end_status
  __end_dnd
  CHANNEL_ID="$GENERAL_CHANNEL_ID"
  __set_chan_text "${here_messages[$rand]}"

  unset here_messages
}

function back() {
  __set_presence "auto"
  __end_status
  __end_dnd
  __set_chan_text "back"
}

function do_status() {
  local given_status="$1"
  STATUS_PARAM="$given_status"

  [[ $VERBOSE == "true" || $DEBUG == "true" ]] && __info

  if (${given_status} "$@"); then
    __log "status updated to $given_status"
    exit 0
  else
    __log "failed to set status to $given_status" "error"
    exit 1
  fi
}

# if we pass in a status, use it directly
if [[ $STATUS_PARAM ]]; then
  [[ $VERBOSE == "true" || $DEBUG == "true" ]] && __info
  do_status "$STATUS_PARAM"
else
  # otherwise, fuzzy-find based upon our supported statuses; if fzf installed
  if [[ $FZF_FOUND == "installed" ]]; then
    selected_status="$(echo "$statuses" | $fzf_cmd --reverse --border=none --padding="1" --preview-window="border-left" --prompt="聆select slack status  " --header=" supported slack statuses" --bind="enter:replace-query+print-query" --preview-window="hidden")"
    [[ -n $selected_status ]] && do_status "$selected_status"
  else
    printf -- "ERROR: %s requires FZF to be installed for fuzzy finding statuses" "$__base"
    __help
    exit 1
  fi
fi
