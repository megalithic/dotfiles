#!/usr/bin/env zsh
# shellcheck shell=bash

# tm [SESSION_NAME | FUZZY PATTERN] - create new tmux session, or switch to existing one.
# Running `ftm` will let you fuzzy-find a session mame
# Passing an argument to `ftm` will switch to that session if it exists or create it otherwise (as a tmuxinator session if it exists)
#
# NOTE: presently only works for zsh

[[ -n $TMUX ]] && change="switch-client" || change="attach-session"

function to_session() {
	tmux $change -t "$1"
}

# new session with tmuxinator config, OR just new basic tmux session
function new_session() {
	(tmuxinator start "$1" --no-attach \
		&& to_session $1 \
		|| tmux new-session -d -s "$1" \
		&& to_session $1) && exit
}

function try_session() {
	to_session $1 2>/dev/null || new_session $1
	return
}

# if we pass in a param to this binary, switch to it OR, create a new session
if [ $1 ]; then
	try_session $1
fi

# get our session from fzf (grabs the the active pane from each session as
# preview, too!)
sessions_count=$(tmux list-sessions -F "#S" | wc -l | sed -e 's/^[[:space:]]*//')

# FIXME:
# - do we want to filter out the current session or not? quick flip with just 2 sessions is nice though.
session=$(tmux list-sessions -F "#S" | grep -v "^$(tmux display-message -p '#S')\$" | fzf --reverse --header=" Select a session..." --bind='enter:replace-query+print-query' --preview="echo {} | sed 's/:.*$//' | xargs -I{} tmux capture-pane -ep -t {}")

# TODO: need a way to force creating a new session in the event we just want to;
# if launching from within TMUX
if [[ $sessions_count == 1 ]]; then
	# only one session running, take input to create another (since nothing else
	# to switch to):
	vared -p " Only 1 session running; create another? " -c input
	new_session $input
else
	# start the chain to either switch to it if it exists OR, create a new session
	try_session $session
fi
