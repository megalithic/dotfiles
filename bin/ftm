#!/usr/bin/env bash

#
# What in tarnation is this?
#
# CLI tool to create new tmux layout/session, or switch to running tmux
# session.
#
# ftm [options] [SESSION_NAME | FUZZY_PATTERN]
#
# Running `ftm` with no argument will let you fuzzy-find a running session name
#
# Passing an argument to `ftm` will switch to that session if it exists or
# create it
#
# Dependencies:
#   Required: `fzf`
#
# TODO:
#   - not able to create a new session when at exactly 2 active sessions; must
#   rely on `ftm [EXPLICIT_SESSION_NAME]` instead of the fzf TUI.
#

set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "$__file" .sh)"
__root="$(cd "$(dirname "$__dir")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"

TMUX="${TMUX:-}"
POPUP="false"
SAVED_SESSION_NAME="${SAVED_SESSION_NAME:-}"

# -- check for our dependencies..
[[ -n $TMUX ]] && TMUX_RUNNING="running" || TMUX_RUNNING="not running"
(command -v fzf &>/dev/null) && FZF_FOUND="installed" || FZF_FOUND="not installed"
[[ -d "$HOME/.config/tmux/scripts/layouts" ]] && layouts_dir="$HOME/.config/tmux/scripts/layouts" || layouts_dir=""

# -- friendly help if -h option given
function __help() {
  printf -- "Usage: %s [options] [SESSION_NAME | FUZZY_PATTERN]\n" "$__base"
  printf -- "\n"
  printf -- "   Options:\n"
  printf -- "     -p              Run fzf normally for tmux' popup feature, else fzf-tmux\n"
  printf -- "     -h              This help text you're presently reading. 😄\n"
  printf -- "\n"
  printf -- "   Dependencies:\n"
  printf -- "     tmux            (%s)\n" "$TMUX_RUNNING"
  printf -- "     fzf             (%s)\n" "$FZF_FOUND"
  printf -- "\n"

  exit 0
}

# -- halt if we don't have FZF installed
if [[ $FZF_FOUND == "not installed" ]]; then
  printf -- "ERROR: %s requires FZF to be installed" "$__base"
  __help
  exit 1
fi

while getopts "phs:" OPTION; do
  case $OPTION in

    p)
      POPUP="true"
      ;;

    h)
      __help
      ;;
    s)
      SAVED_SESSION_NAME="$OPTARG"
      echo "Saving session with session name: $OPTARG"
      exit 0
      ;;

    \?)
      # NOTE: this covers the case where an optarg may not be provided
      # and will exit errored
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
    :)
      echo "Invalid Option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done
# shift $((OPTIND - 1))
shift "$(($OPTIND - 1))"
# -- this is our given session_name param, sans options
session_name="${1:-}"

# -- handle options
[[ -n $TMUX ]] && change="switch-client" || change="attach-session"
[[ $POPUP == "true" ]] && fzf_cmd="fzf" || fzf_cmd="fzf-tmux"

# -- array of available pre-defined layouts
declare -a layouts

# -- gets possible pre-defined layouts (naive config dir assumption)
function get_layouts() {
  if [[ -n $layouts_dir ]]; then
    for config in "$layouts_dir"/*.zsh; do
      layout="$(basename "${config##*/}" .zsh)"
      layouts+=("$layout")
    done
    printf "%s\n" "${layouts[@]}"
  else
    return
  fi
}

# -- change to the given existing session
function to_session() {
  local session="$1"
  tmux "$change" -t "$session"
}

# -- new session with pre-defined layout, OR just new basic tmux session
function new_session() {
  local session="$1"

  if [[ -f "$layouts_dir/$session.zsh" ]]; then
    (sh "$layouts_dir/$session.zsh" &&
      to_session "$session" ||
      tmux new-session -d -s "$session" &&
      to_session "$session") && exit
  else
    (sh "$layouts_dir/default.zsh" "$session" &&
      to_session "$session" ||
      tmux new-session -d -s "$session" &&
      to_session "$session") && exit
  fi
}

# -- try to change to an existing session; otherwise, create a new one
function try_session() {
  local session="$1"
  to_session "$session" 2>/dev/null || new_session "$session"
  # TODO: do we really want this?
  # tmux display-message " $session activated.."
}

function fuzzy_find() {
  # -- prepare for fuzzy-finding!!
  layouts_list="$(get_layouts)"
  current_sessions_list=$(tmux list-sessions -F "#S")

  # combine our pre-defined layouts AND open sessions
  sessions_list=$(printf "%s\n%s" "$layouts_list" "$current_sessions_list" | sort -u)
  current_session="$(tmux display-message -p '#S')"
  sessions_count=$(echo "$sessions_list" | wc -l | sed -e 's/^[[:space:]]*//')
  preview_lines_of_output=10

  preview_cmd_layout_info="echo {} | sed 's/:.*$//' | xargs -I {} | xargs tmux has-session -t 2>/dev/null && xargs -I {} | echo '$(tput sgr 0 1)$(tput setaf 6) windows in session:$(tput sgr 0)\n' && tmux list-windows -F '░ #{window_index}:#W (#P/#{window_panes})' -t {}"
  preview_cmd_preview="echo '$(tput sgr 0 1)$(tput setaf 6) last $preview_lines_of_output lines of output:$(tput sgr 0)\n' && tmux capture-pane -ep -S- -E- -t {} | sed '/^$/d' | tr -s ' '  | tr -s 'q' | sed 's/^/░ /' | sed 's/─//g' |  tail -$preview_lines_of_output"

  preview_cmd="$preview_cmd_layout_info" #" && echo "" && ${preview_cmd_preview}"

  # preview_cmd="echo {} | sed 's/:.*$//' | xargs -I {} | xargs tmux has-session -t 2>/dev/null && xargs -I {} | echo '$(tput sgr 0 1)$(tput setaf 6) windows in session:$(tput sgr 0)\n' && tmux list-windows -F '░ #{window_index}:#W (#P/#{window_panes})' -t {} && echo "" && echo '$(tput sgr 0 1)$(tput setaf 6) last $preview_lines_of_output lines of output:$(tput sgr 0)\n' && tmux capture-pane -ep -S- -E- -t {} | sed '/^$/d' | tr -s ' '  | tr -s 'q' | sed 's/^/░ /' | sed 's/─//g' |  tail -$preview_lines_of_output"

  # -- do certain things based upon only one active session
  if [[ $sessions_count == 1 ]]; then
    fzf_prompt_text=" create new session  "
    fzf_header_text=""

    # -- provide user with their available pre-defined layouts (assumes certain dir)
    sessions_list="$(get_layouts)"
    layouts_sessions_count=$(echo "$sessions_list" | wc -l | sed -e 's/^[[:space:]]*//')
    [[ $layouts_sessions_count -gt 0 ]] && fzf_header_text="󰢩 possible layouts"
    [[ $layouts_sessions_count -gt 0 ]] && preview_cmd="fd {} $layouts_dir | xargs bat"
  else
    fzf_prompt_text=" new or existing session  "
    fzf_header_text="󰢩 $(tput sitm)$(tput setaf 5)$current_session$(tput sgr 0) / $(tput setaf 255)ctrl-x$(tput sgr 0): $(tput setaf 245)kill-session"
  fi

  # -- get our session from fzf (grabs the the active pane from each session as preview, too!)
  fzf_list=$(echo "$sessions_list" | grep -v "^default\$" | grep -v "^$current_session\$")
  select_session_bind="enter:replace-query+print-query"
  kill_session_bind="ctrl-x:execute(tmux kill-session -t {})+reload(echo \"$sessions_list\" | grep -v \"^default\$\" | grep -v \"^$current_session\$\")"
  try_session "$(echo "$fzf_list" | "$fzf_cmd" --reverse --border=none --padding="1" --prompt="$fzf_prompt_text" --header="$fzf_header_text" --bind="$select_session_bind" --bind="$kill_session_bind" --preview="$preview_cmd")"
}

# -- if we pass in a session_name: attach/switch to it or, create new session
if [[ $session_name ]]; then
  try_session "$session_name"
  exit 0
elif [[ -z $TMUX ]]; then
  __help
fi

fuzzy_find
