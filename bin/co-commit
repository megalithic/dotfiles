#!/usr/bin/env ruby

require "yaml"

class Object
  alias then yield_self
end

class Author
  def self.load(hash)
    new(hash["name"], hash["email"])
  end

  def initialize(name, email)
    @name = name
    @email = email
  end

  def to_s
    "#{@name} <#{@email}>"
  end

  def dump
    {"name" => @name, "email" => @email}
  end
end

class CoCommiterCache
  def initialize
    @filename = File.expand_path(".co-committers.yml", __dir__)
    @authors = load_authors
  end

  def known_author?(abbrev)
    @authors.member?(abbrev)
  end

  def add_author(abbrev, name, email)
    sync do
      @authors[abbrev] = Author.new(name, email)
    end
  end

  def remove_author(abbrev)
    sync do
      @authors.delete(abbrev)
    end
  end

  def print_list
    @authors.each do |(abbrev, author)|
      puts "#{abbrev} - #{author}"
    end
  end

  def get(abbrevs)
    @authors
      .values_at(*abbrevs)
      .reject(&:nil?)
  end

  private

  def load_authors
    ensure_file
    load_file
  end

  def ensure_file
    File.open(@filename, "a") {}
  end

  def load_file
    (YAML.load_file(@filename) || {})
      .transform_values(&Author.method(:load))
  end

  def sync
    yield

    File.open @filename, "w" do |file|
      YAML.dump(@authors.transform_values(&:dump), file)
    end
  end
end

class Commit
  @@template = File.expand_path(".co-commit.template.txt", __dir__)

  def initialize(cache, args)
    @cache = cache
    @abbrevs, @flags = parse_args(args)
  end

  def call
    if have_message_flag?
      git_commit_with_message
    else
      git_commit_with_template
    end
  end

  private

  def parse_args(args)
    args
      .partition { |arg| @cache.known_author?(arg) }
      .then(&map_second { |flags|
        flags.each_with_index.reduce({}) { |memo, (flag, index)|
          next_flag = flags[index + 1]

          if flag.start_with?("-") && !next_flag.nil? && !next_flag.start_with?("-")
            memo.merge(flag => next_flag)
          elsif flag.start_with?("-")
            memo.merge(flag => true)
          else
            memo
          end
        }
      })
  end

  def map_second(&block)
    ->((first, second)) { [first, block.call(second)] }
  end

  def co_authors
    @cache
      .get(@abbrevs)
      .map { |author| "Co-authored-by: #{author}"}
      .join("\n")
  end

  def git_commit_with_template
    File.write(@@template, "\n\n#{co_authors}")
    system "git commit -t #{@@template}"
  end

  def git_commit_with_message
    message = <<~MESSAGE.rstrip
      #{@flags["-m"]}

      #{co_authors}
    MESSAGE

    flags_string =
      @flags
        .lazy
        .reject { |key, _| key == "-m" }
        .flat_map { |key, value| value == true ? [key] : [key, value] }
        .to_a
        .join(" ")

    system %(git commit -m "#{message}" #{flags_string})
  end

  def have_message_flag?
    @flags.member?("-m")
  end
end

class Commands
  def self.select(cache, args)
    command_name, *remaining_args = args

    handler =
      case command_name
      when "add"
        -> {
          abbrev, name, email = remaining_args
          cache.add_author(abbrev, name, email)
        }
      when "remove"
        -> {
          abbrev = remaining_args[0]
          cache.remove_author(abbrev)
        }
      when "list"
        -> { cache.print_list }
      else
        Commit.new(cache, args)
      end

    handler
  end
end

module Program
  class << self
    def run(args)
      Commands.select(CoCommiterCache.new, args).call
    end
  end
end

Program.run(ARGV)
