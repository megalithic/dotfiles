#!/bin/bash

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi
if [[ -z $XDG_CACHE_HOME ]]; then
  export XDG_CACHE_HOME="$HOME/.cache"
fi

[[ -f "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh" ]] && source "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh"

set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "$__file" .sh)"
__root="$(cd "$(dirname "$__dir")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"

FORCE_INSTALL="false"

packer_rtp_type="opt" # "opt" or "start"
packer_path="${XDG_DATA_HOME}/nvim/site/pack/packer/$packer_rtp_type/packer.nvim"

remove_existing() {
  (rm -rf "${XDG_DATA_HOME}/nvim/site/pack/packer" && rm -f "${XDG_CACHE_HOME}/nvim/packer/packer_compiled.lua" && rm -rf "${XDG_CACHE_HOME}/nvim/packer_hererocks") || exit 1
}

do_clone() {
  git clone --depth=1 https://github.com/wbthomason/packer.nvim.git "$packer_path"
}

install_plugins() {
  nvim --headless -u NONE -c 'lua require("mega.plugins.packer").bootstrap(true)' -c ':quit'
}

sync_plugins() {
  # nvim --headless -u NONE -c 'lua require("mega.plugins.packer").sync_all()' -c ':quit'
  # nvim +PackerCompile +PackerSync
  PACKER_NON_INTERACTIVE=true nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
}

do_install() {
  log "cloning packer.nvim into $packer_path"
  if [[ -d $packer_path ]]; then
    log_warn "existing packer.nvim found.."
    remove_existing
  fi
  do_clone &&
  install_plugins &&
  log_ok "completed installing packer.nvim and plugins into $packer_path" ||
  exit 1
}

while getopts "ufrsc" OPTION; do
  case $OPTION in

    u)
      log "updating packer plugins.."
      sync_plugins &&
      (echo "" && log_ok "finished updating packer plugins.") ||
      (echo "" && log_error "something went wrong while updating packer plugins; exiting.")
      exit 1
      ;;

    s)
      log "taking a packer snapshot.."
      rm -f ~/.cache/nvim/packer.nvim/packer.lock
      nvim "+autocmd User PackerComplete qa!" "+PackerSnapshot packer.lock"
      cat "$HOME/.cache/nvim/packer.nvim/packer.lock" | jq . >packer.lock
      exit 1
      ;;

    r)
      log "rolling back a packer snapshot.."
      cp packer.lock "$HOME/.cache/nvim/packer.nvim/packer.lock"
      nvim "+autocmd User PackerComplete qa!" "+PackerSnapshotRollback packer.lock"
      exit 1
      ;;

    f)
      FORCE_INSTALL="true"
      ;;

    c)
      log "cleaning previous packer.nvim install.."
      remove_existing &&
      (echo "" && log_ok "finished cleaning previous packer.nvim install.") ||
      (echo "" && log_error "something went wrong while cleaning previous packer.nvim install; exiting.")
      exit 1
      ;;

    \?)
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;

      # PACKER_PATH = $(HOME)/.local/share/nvim/site/pack/packer/start/packer.nvim

      # install: packer

      # packer: $(PACKER_PATH) ## Install packer
      # $(PACKER_PATH):
      # 	git clone --depth 1 https://github.com/wbthomason/packer.nvim $(PACKER_PATH)

      # sync: packer
      # 	nvim +PackerCompile +PackerSync

      # clean: ## Removes packer
      # 	rm -rf $(PACKER_PATH) plugin/packer_compiled.lua

      # clean-all: ## Removes packer and all plugins
      # 	rm -rf $(HOME)/.local/share/nvim/site/pack/packer plugin/packer_compiled.lua

      # snapshot: ## Take snapshot of known working package versions (experimental)
      # 	rm -f ~/.cache/nvim/packer.nvim/packer.lock
      # 	nvim "+autocmd User PackerComplete qa!" "+PackerSnapshot packer.lock"
      # 	cat ~/.cache/nvim/packer.nvim/packer.lock | jq . > packer.lock

      # rollback: ## Rollback to last snapshot (experimental)
      # 	cp packer.lock ~/.cache/nvim/packer.nvim/packer.lock
      # 	nvim "+autocmd User PackerComplete qa!" "+PackerSnapshotRollback packer.lock"

  esac
done
shift $((OPTIND - 1))

if [[ -d $packer_path && $FORCE_INSTALL == "false" ]]; then
  log_warn "packer.nvim already exists at $packer_path; syncing installed plugins instead."
  sync_plugins
else
  do_install || exit 1
fi
