#!/usr/bin/env bash

# REF:
# - https://github.com/oliverralbertini/shell_functions/blob/249fea2d9e7679e80d762ab921a403f6cc6acbb6/abduce.sh
# - https://github.com/DoomHammer/tmux-scratch/blob/a935ec522733dfd6c8d0535995054d62e73ad37f/scripts/scratch.sh

set -euo pipefail

[[ -f "$ZDOTDIR/lib/helpers.zsh" ]] && source "$ZDOTDIR/lib/helpers.zsh"

# clean_exit defined in helpers.zsh
# trap 'clean_exit $? $LINENO' EXIT

# -- friendly help if -h option given
function __help() {
  printf -- "Usage: %s [options] [SESSION_NAME]\n" "duc"
  printf -- "\n"
  printf -- "Options:\n"
  printf -- "  -h  This help text you're presently reading üòÑ\n"
  printf -- "  -b  Background the newly created session\n"
  printf -- "  -l  List abduco sessions non-interactively\n"
  printf -- "\n"
  printf -- "Examples:\n"
  printf -- "  duc processes htop\n"
  printf -- "  duc weechat weechat\n"
  printf -- "  duc logs dev logs -f\n"
  printf -- "\n"
  printf -- "#protip:\n"
  printf -- "  <C-\\> to detach from active session\n"
  printf -- "\n"

  exit 0
}

IMMEDIATELY_ATTACH="true"

while getopts "hbl" OPTION; do
  case $OPTION in
    b)
      IMMEDIATELY_ATTACH="false"
      ;;

    h)
      __help
      ;;

    l)
      abduco -l
      exit 0
      ;;

    \?)
      # NOTE: this covers the case where an optarg may not be provided
      # and will exit errored
      log_error "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;
  esac
done
shift "$((OPTIND - 1))"

# -- this is our given session_name param, sans options
session_name="${1:-}"
shift

cmd="${@:-}"

# -- try to change to an existing session; otherwise, create a new one
function try_session() {
  local session="$1"
  local session_create_opt="-c"

  # no session given; bail out
  if [[ -z "$session" ]]; then
    exit 0
  fi

  if [[ $IMMEDIATELY_ATTACH == "false" ]]; then
    session_create_opt="-n"
  fi

  if abduco -l | grep -q "$session"; then
    log_info "attaching to session $session..."
    sleep 0.3
    abduco -A "$session"
  elif [[ -n "$cmd" ]]; then
    log_warn "creating session $session; with command $cmd..."
    sleep 0.3
    echo "${cmd[@]}" | xargs abduco "$session_create_opt" "$session"
  else
    log_error "could not attach to or create new session named $session; exiting.."
    exit 1
  fi
}

function fuzzy_find() {
  # -- prepare for fuzzy-finding!!
  # REF: finds the attached session abduco -l | awk '$1 ~ /^\*/'
  # sessions_list=$(abduco | tail -n+2 | cut -f 4)
  sessions_list=$(abduco | tail -n +2 | awk '{print $NF}')

  if [[ -z "$sessions_list" ]]; then
    printf -- "${yellow}No %s${reset}\n" "$(abduco)"
    printf -- "\n"
    __help
  fi

  fzf_prompt_text="Ôíê attach to session ÔÅî "

  # -- get our session from fzf (grabs the the active pane from each session as preview, too!)
  selected="$(echo "$sessions_list" | fzf --reverse --border=none --padding="1" --preview-window="hidden" --prompt="$fzf_prompt_text" --bind="enter:replace-query+print-query")"
  try_session "$selected"
}

# -- if we pass in a session_name: attach/switch to it or, create new session
if [[ -n "$session_name" ]]; then
  try_session "$session_name"
  exit 0
fi

# -- no session given so invoke fzf instead
fuzzy_find
