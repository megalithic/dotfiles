#!/bin/zsh

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

source "${HOME}/.dotfiles/config/zsh/lib/helpers.zsh"

# set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "$__file" .sh)"
__root="$(cd "$(dirname "$__dir")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"

LSPS_PATH="${XDG_DATA_HOME}/lsp"
LSPS_BIN_PATH="${XDG_DATA_HOME}/lsp/bin"
LS_PATH="${LSPS_PATH}/next-ls"
TMP_PATH="$HOME/tmp"

if [ ! -d "$LS_PATH" ]; then
  mkdir -p "$LS_PATH"
fi

if [ ! -d "$LSPS_BIN_PATH" ]; then
  mkdir -p "$LSPS_BIN_PATH"
fi

VERSION="${1:-latest}" # "latest" uses gh release downloader
# VERSION="${1:-main}"
TARGET=""
BINARY=""
BUILD_TYPE=""
SYS="$(echo "$(uname)" | awk '{print tolower($0)}')"
ARCH="$(echo "$(uname -m)" | awk '{print tolower($0)}')"
BUILD_BIN="next_ls_${SYS}_${ARCH}"

rm -rf "$LS_PATH"

do_install() {
  local bin_path="$LS_PATH/burrito_out/$BUILD_BIN"

  case "$VERSION" in
    'release' | 'stable')
      TARGET="https://github.com/elixir-tools/next-ls/releases/latest/download"
      BINARY="next_ls_${SYS}_${ARCH}"
      BUILD_TYPE="release"
      ;;
    'latest')
      # local tag=v0.22.6
      local tag=
      local tag_display=[[ -z "$tag" ]] && echo "latest" || echo "$tag"
      log_info "downloading and installing gh release $tag_display to $LSPS_BIN_PATH/nextls"
      gh release download "$tag" \
        --pattern $BUILD_BIN \
        --output $LSPS_BIN_PATH/nextls \
        --clobber \
        --repo elixir-tools/next-ls && log_ok "installed gh release to $LSPS_BIN_PATH/nextls"

      chmod +x $LSPS_BIN_PATH/nextls
      log_info "gh release $tag_display is ready at $LSPS_BIN_PATH/nextls"
      exit 1
      ;;
    'git')
      TARGET="https://github.com/elixir-tools/next-ls"
      BUILD_TYPE="git"
      ;;
    'main' | 'master')
      TARGET="https://github.com/elixir-tools/next-ls/archive/refs/heads"
      BINARY="${VERSION}.zip"
      BUILD_TYPE="source"
      ;;
    *)
      TARGET="https://github.com/elixir-tools/next-ls/archive"
      BINARY="${VERSION}.zip"
      BUILD_TYPE="source"
      ;;
  esac

  if [[ $BUILD_TYPE == "source" ]]; then
    log "($BUILD_TYPE) downloading $TARGET/$BINARY.."
    cd "$TMP_PATH" &&
      (
        curl -fLO "$TARGET/$BINARY" &&
          (tar -xvzf "$BINARY" -C "$LSPS_PATH" && log_ok "unpacked $TARGET/$BINARY to $LSPS_PATH") &&
          mv "$LSPS_PATH/next-ls-$VERSION" "$LS_PATH" &&
          pushd "$LS_PATH" >/dev/null &&
          (mix do local.hex --force, local.rebar --force && BURRITO_TARGET="${SYS}_${ARCH}" MIX_ENV="prod" NEXTLS_RELEASE_MODE="burrito" mix do deps.get, release && log_ok "built next-ls") &&
          chmod +x "$bin_path" &&
          popd >/dev/null &&
          (rm "$BINARY" && log_ok "removed $TMP_PATH/$BINARY")
      ) && log_ok "finished downloading and installing next-ls ($VERSION) to $bin_path" ||
      exit 1
  else
    log_warn "$BUILD_TYPE not yet supported."
  fi
}

do_install || exit 1
