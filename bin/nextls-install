#!/bin/zsh

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

source "${HOME}/.dotfiles/config/zsh/lib/helpers.zsh"

# set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "$__file" .sh)"
__root="$(cd "$(dirname "$__dir")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"

LSPS_PATH="${XDG_DATA_HOME}/lsp"
LS_PATH="${LSPS_PATH}/nextls"
mkdir -p "$LS_PATH"

VERSION="${1:-git}"
TARGET=""
BINARY=""
BUILD_TYPE=""
SYS="$(echo "$(uname)" | awk '{print tolower($0)}')"
ARCH="$(echo "$(uname -m)" | awk '{print tolower($0)}')"

rm -rf "$LS_PATH"

do_install() {
  case "$VERSION" in
    'stable')
      TARGET="https://github.com/elixir-tools/next-ls/releases/latest/download"
      BINARY="next_ls_${SYS}_${ARCH}.zip"
      BUILD_TYPE="archive"
      ;;
    'git')
      TARGET="https://github.com/elixir-tools/next-ls"
      BUILD_TYPE="git"
      ;;
    'main' | 'master')
      TARGET="https://github.com/elixir-tools/next-ls/archive/refs/heads"
      BINARY="main.zip"
      BUILD_TYPE="source"
      ;;
    *)
      TARGET="https://github.com/elixir-tools/next-ls/archive"
      BINARY="${VERSION}.tar.gz"
      BUILD_TYPE="source"
      ;;
  esac

  if [[ $BUILD_TYPE == "archive" ]]; then
    log_warn "$BUILD_TYPE not supported."
  elif [[ $BUILD_TYPE == "source" ]]; then
    log "downloading and unpacking.."

    cd ~/tmp &&
      (

        # curl --fail --silent -L https://github.com/elixir-tools/next-ls/releases/latest/download/next_ls_%s_%s -o %s/nextls
        curl -fLO "$TARGET/$BINARY" &&
          (tar -xvzf "$BINARY" -C "$LSPS_PATH" && log_ok "unpacked $TARGET/$BINARY to $LSPS_PATH") &&
          mv "$LSPS_PATH/next-ls-$VERSION" "$LS_PATH" &&
          pushd "$LS_PATH" >/dev/null &&
          # (mix deps.get && mix package && log_ok "built next-ls") &&
          popd >/dev/null &&
          (rm "$BINARY" && log_ok "removed $HOME/$BINARY")
      ) && log_ok "finished downloading and installing next-ls ($VERSION) to $LS_PATH" ||
      exit 1
  elif [[ $BUILD_TYPE == "git" ]]; then
    log_warn "$BUILD_TYPE not supported."
  fi
}

do_install || exit 1
