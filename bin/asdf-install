#!/bin/zsh

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

source "${HOME}/.dotfiles/config/zsh/lib/helpers.zsh"

#set -euo pipefail

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

FORCE_INSTALL="false"
CLEAN_FIRST="false"

while getopts "fc" OPTION; do
  case $OPTION in

    f)
      FORCE_INSTALL="true"
      ;;

    c)
      CLEAN_FIRST="true"
      ;;

    \?)
      echo "Invalid Option: -$OPTARG" 1>&2
      exit 1
      ;;

  esac
done
shift $((OPTIND - 1))

asdf_path="$HOME/.asdf"

install_plugins() {
  log "adding asdf plugins.."
  # preferred plugins..
  #  -- generic things to manage with asdf:
  #     https://github.com/asdf-community/asdf-link

  # set +o pipefail +e
  # # for plugin in erlang elixir nodejs ruby elm golang lua rust python; do
  # for plugin in erlang elixir nodejs ruby golang lua rust; do
  #   log "installing asdf plugin: $plugin"

  #   asdf plugin add "$plugin" "https://github.com/asdf-vm/asdf-$plugin.git"
  # done
  # set -o pipefail -e

  asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
  asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git
  asdf plugin add erlang https://github.com/asdf-vm/asdf-erlang.git
  asdf plugin add elixir https://github.com/asdf-vm/asdf-elixir.git
  asdf plugin add elm https://github.com/asdf-community/asdf-elm.git
  asdf plugin add golang https://github.com/kennyp/asdf-golang.git
  asdf plugin add lua https://github.com/Stratus3D/asdf-lua.git
  asdf plugin add rust https://github.com/code-lever/asdf-rust.git
  asdf plugin add python https://github.com/danhper/asdf-python.git
}

install_versions() {
  log "installing asdf versions ($(uname)).."

  # reset the cache for the available versions for these plugins:
  asdf list all nodejs >/dev/null
  asdf list all ruby >/dev/null
  asdf list all elixir >/dev/null

  # REF: https://www.notion.so/Droplet-Ubuntu-Upgrade-0bacdb0df2344225b243362982d0c861
  # - having to do some interesting trickery to get around Linuxbrew/ruby-build issues..
  # Disable linuxbrew as it breaks ruby-build and possibly others Save so we can revert
  if [[ "$(uname)" == "Linux" ]]; then
    log "installing linux dependencies for erlang and more.."
    sudo apt-get -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev unixodbc-dev xsltproc fop libxml2-utils libncurses-dev openjdk-11-jdk libssl-dev

    log_warn "linuxbrew workaround: set PATH to OLD_PATH.."
    OLD_PATH="$PATH"

    log_warn "linuxbrew workaround: remove linuxbrew from the path.."
    export PATH="$(echo $PATH | tr : '\n' | grep -v linuxbrew | paste -s -d:)"

    asdf install

    log_warn "linuxbrew workaround: revert OLD_PATH back to PATH.."
    export PATH=$OLD_PATH
  else
    log "installing plugin versions for $(uname)"
    asdf install
  fi

  log "reshimming asdf versions"
  asdf reshim
}

update_asdf() {
  asdf update
  asdf plugin update --all
}

do_install() {
  if [[ -d "$asdf_path" || $CLEAN_FIRST == "true" ]]; then
    log_warn "cleaning existing asdf install from $asdf_path"
    rm -rf "$asdf_path"
  fi

  log "cloning asdf into $asdf_path"
  (git clone https://github.com/asdf-vm/asdf.git "$asdf_path" &&
    source "$asdf_path/asdf.sh" &&
    install_plugins &&
    install_versions &&
  log_ok "completed installing asdf-nvim into $asdf_path") ||
  exit 1
}

if [[ $FORCE_INSTALL == "true" ]]; then
  log_warn "force installing asdf.."
  do_install && exit 0 || exit 1
fi

if type "asdf" &>/dev/null; then
  log_warn "asdf already installed; updating instead."
  update_asdf
  install_plugins
  install_versions
else
  log_warn "asdf not installed; installing fresh."
  do_install
fi
