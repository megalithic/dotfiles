#!/usr/bin/env bash

# Source: https://gist.github.com/jordan-brough/48e2803c0ffa6dc2e0bd
# Updated: https://github.com/megalithic/dotfiles/bin/git-recent

# Download this script as "git-recent" (no extension), chmod it to be executable and put it in your
# path somewhere (e.g. /usr/bin). You can then use it via `git recent` from inside any git repo.

# Examples:

# Interactive prompt for most recent 4 branches:
#   $ git recent -n 5
#   1) master  4) deleted-branch
#   2) stable  5) improve-everything
#   3) fun
#   Choose a branch: 2

# List mode (non-interactive):
#   $ git recent -n 5 -l
#   master
#   stable
#   fun
#   deleted-branch
#   improve-everything

# Verify branch existence:
#   $ git recent -n 5 -l -e
#   master
#   stable
#   fun
#   improve-everything
#   something-else
#   # (notice "deleted-branch" removed from results)

# Contributors:
#   - jordan-brough
#   - fritz-c

usage() {
  echo "usage: git recent [-n lines] [-l] [-e]"
}

while getopts "hn:le" opt; do
  case $opt in
    h) # help
      usage
      exit 1
      ;;
    n) # number of results
      NUM=$OPTARG
      ;;
    l) # list mode (non-interactive)
      INTERACTIVE=0
      ;;
    e) # validate existence
      CHECK_EXISTENCE=1
      ;;
    \?)
      usage
      exit 1
      ;;
  esac
done

NUM=${NUM-10}                        # default to 10 lines
INTERACTIVE=${INTERACTIVE-1}         # default to interactive
CHECK_EXISTENCE=${CHECK_EXISTENCE-0} # default to *not* checking existence (faster)

BRANCHES=(
  $(
    git reflog |
      egrep -io "moving from ([^[:space:]]+)" |
      awk '{ print $3 }' |        # extract 3rd column
      awk ' !x[$0]++' |           # Removes duplicates.  See http://stackoverflow.com/questions/11532157
      egrep -v '^[a-f0-9]{40}$' | # remove hash results
      while read line; do         # verify existence
        ([[ $CHECK_EXISTENCE = '0' ]] || git rev-parse --verify "$line" &>/dev/null) && echo "$line"
      done |
      head -n "$NUM"
  )
)

if [[ $INTERACTIVE = '1' ]]; then
  has_fzf=$(command -v /usr/local/bin/fzf &>/dev/null)

  if [[ -z $has_fzf ]]; then
    selected_branch=$(printf -- "%s\n" "${BRANCHES[@]}" | fzf-tmux -m -d=20% --prompt="îœ¥ select a branch.." --preview-window="hidden" --bind="esc:cancel" -0)

    [[ -n $selected_branch ]] && echo "hi $selected_branch" || exit 1 #git checkout "$selected_branch" || exit 1
  else
    PS3="Choose a branch: "

    select d in "${BRANCHES[@]}"; do
      test -n "$d" && break
      echo ">>> Invalid Selection"
    done
  fi
else
  printf '%s\n' "${BRANCHES[@]}"
fi
