#!/bin/sh

#
# What in tarnation?
#
# This is a tool that, IMO, is better than tmate. Bold statement.
# Anyway, this tool has assumptions that you:
#   1.) have tmux installed and setup
#   2.) have the github-auth gem installed
#   3.) have ngrok and have the proper tunnel setup, with remote-addr support.
#
# Assuming this is good, then you can add users via their github usernames,
# you can start up and tear down the ssh pairing session.
#
# You'll want to ensure you have some system things setup for the `pair` user:
# `sudo dscl . -append /Users/$USER RecordName Pair pair`
# Lastly, you'll want to make sure your macOS sshd config setup accepts public-key authentication:
# `sudo sed -E -i.bak 's/^#?(PasswordAuthentication|ChallengeResponseAuthentication).*$/\1 no/' /etc/ssh/sshd_config`

# That's it! Feel free to update things; because this is very much configured to my usages.

# Credit where credit is due!
# - thanks to @jeffweiss for pointing this out; parts of this script originated from
#   @iamvery, and can be found here: https://github.com/iamvery/dotfiles/blob/9e4a7a746f38ade813846e648eefedaf2c0315ef/bin/ng
#



command="$(basename "$0")"
session="pairing"

# Make sure dependencies are installed
[ ! "$(command -v gh-auth)" ] && echo "gh-auth not found (gem install github-auth)" && exit 1
[ ! "$(command -v tmux)" ] && echo "tmux not found" && exit 1

help() {
  echo "Usage: "$command" <subcommand> [options]\n"
  echo "Subcommands:"
  echo "    add  Add a github user"
  echo "    rm   Remove a github user"
  echo "    ls   List github users"
  echo "    up   Open shared tmux session"
  echo "    down Terminates shared tmux session"
  echo "    ssh  Start a reverse tunnel for pair sharing"
  echo "         See: https://ngrok.com"
}

add() {
  gh-auth add --users "$@" --command="$(which tmux) attach -t $session"
}

rm() {
  gh-auth remove --users "$@"
}

ls() {
  gh-auth list | sed 's/ /\n/g'
}

up() {
  for user in "$@";do
    add "$user"
  done

  tmux new -s $session -d
  tmux switch -t $session
  tmux send-keys -t $session "ngrok start ${session}" C-m
  tmux split-window -h -t $session
  sleep 5 # gives time for ngrok to spin up; so we can retrieve the port
  tmux send-keys -t $session "pair ssh" C-m
}

down() {
  pkill -9 -f ngrok
  tmux kill-session -t $session
}

ssh() {
  host="1.tcp.ngrok.io"
  port=$(curl -s http://localhost:4040/api/tunnels|jq -r '.tunnels[0].public_url'| cut -d : -f3)
  user=pair
  ssh_command="ssh -p $port $user@$host"
  echo ""
  echo "pairing available at:"
  echo "$ssh_command"
  echo
  echo "the following users are authorized:"
  echo "$(pair ls)"
  echo "$ssh_command" |  pbcopy
}

subcommand=$1
case $subcommand in
  '' | '-h' | '--help')
    help ;;
  *)
    shift
    ${subcommand} $@
    ;;
esac
