#!/bin/sh

#
# What in tarnation?
#
# This is a CLI pairing tool that, IMO, is better than tmate. Bold statement.
#
# It has so far only been tested on macOS 10.14, but with some minor modifications should work on any platform.
#
# Anyway, this tool has assumptions that you:
#   1.) have tmux installed and setup
#   2.) have the github-auth gem installed
#   3.) have ngrok and have the proper tunnel setup, with remote-addr support.
#   4.) optionally, you can install `do-not-disturb-cli` (`npm i -g do-not-disturb-cli`) to have pair automatically set your DND status on macOS
#
# Assuming this is good, then you can add users via their github usernames,
# you can start up and tear down the ssh pairing session.
#
# You'll want to ensure you have some system things setup for the `pair` user:
# `sudo dscl . -append /Users/$USER RecordName Pair pair`
# Lastly, you'll want to make sure your macOS sshd config setup accepts public-key authentication:
# `sudo sed -E -i.bak 's/^#?(PasswordAuthentication|ChallengeResponseAuthentication).*$/\1 no/' /etc/ssh/sshd_config`
#
# That's it! Feel free to update things; because this is very much configured to my usages.
#
# Credit where credit is due!
#   - thanks to @jeffweiss for pointing this out; parts of this script originated from
#     @iamvery, and can be found here: https://github.com/iamvery/dotfiles/blob/pair-as-my-user/bin/ng
#



command="$(basename "$0")"
session="pairing"
ssh_command=""

# Make sure dependencies are installed
[ ! "$(command -v gh-auth)" ] && printf -- "gh-auth not found (gem install github-auth)\n" && exit 1
[ ! "$(command -v tmux)" ] && printf -- "tmux not found, please install for your platform\n" && exit 1

help() {
  printf -- "Usage: "$command" <subcommand> [options]\n"
  printf -- "Subcommands:\n"
  printf -- "    add   Add a github user\n"
  printf -- "    rm    Remove a github user\n"
  printf -- "    ls    List github users\n"
  printf -- "    up    Spin up and open shared tmux session\n"
  printf -- "    down  Terminates shared tmux session\n"
  printf -- "    ssh   Constructs the reverse tunnel using ngrok\n"
  printf -- "          See: https://ngrok.com\n"
  printf -- "    info  Displays handle information about the pairing session\n"
}

add() {
  gh-auth add --users "$@" --command="$(which tmux) attach -t $session"
}

rm() {
  gh-auth remove --users "$@"
}

ls() {
  gh-auth list | sed 's/ /\n/g'
}

up() {
  for user in "$@";do
    add "$user"
  done

  [ -x "$(command -v do-not-disturb)" ] && do-not-disturb on

  tmux new -s $session -d
  tmux switch -t $session
  tmux send-keys -t $session "cd ~; ngrok start ${session}" C-m
  tmux split-window -h -t $session

  # indicate some sort of progress while we wait to get the ngrok session's port number
  DONE=0;
  while [ $DONE -eq 0 ]; do
    if [ "$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | cut -d : -f3)" != "" ]; then
      # once we have the ngrok session's port number, go ahead and display our pair session info
      tmux send-keys -t $session "cd ~; pair info" C-m
      DONE=1
    fi;
    # tmux send-keys -t $session "echo '.'" C-m
    sleep 0.5;
  done;
}

down() {
  [ -x "$(command -v do-not-disturb)" ] && do-not-disturb off
  pkill -9 -f ngrok
  tmux kill-session -t $session
}

ssh() {
  host="1.tcp.ngrok.io"
  port=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | cut -d : -f3)
  user=pair
  ssh_command="ssh -p $port $user@$host"
  printf -- "$ssh_command"
}

info() {
  printf -- "\n"
  printf -- '\033[32mPairing available at: \033[0m\n'
  printf -- "$(pair ssh)\n"
  printf -- "\n"
  printf -- '\033[32mThe following users are authorized to connect: \033[0m\n'
  printf -- "$(pair ls)\n"

  # copy our pair address to the clipboard
  echo "$(pair ssh)" | pbcopy
  printf -- '\n\033[33mâžœ Copied ssh address to clipboard!\033[0m\n'
}

subcommand=$1
case $subcommand in
  '' | '-h' | '--help')
    help ;;
  *)
    shift
    ${subcommand} $@
    ;;
esac
