#!/usr/bin/env bash
#
#
# REF:
# https://www.youtube.com/watch?v=2uEqYw-N8uE
# https://github.com/ThePrimeagen/git-worktree.nvim
# https://github.com/yankeexe/git-worktree-switcher/blob/master/wt
# https://github.com/abellaismail7/git-worktree-script/blob/main/wt

set -euo pipefail
[[ -v DEBUG ]] && set -x

source "$HOME/.config/zsh/lib/helpers.zsh"

# Switch between git worktrees with speed.

args=("$@")
VERSION="0.1.1"
TMP_PATH=$(mktemp)
BINARY_PATH=$(which wt)
JQ_URL="https://stedolan.github.io/jq/download"
RELEASE_URL="https://github.com/yankeexe/git-worktree-switcher/releases/latest"
RELEASE_API_URL="https://api.github.com/repos/yankeexe/git-worktree-switcher/releases/latest"

# Escape forward slash
arg=$(echo "${args[0]}" | sed 's/\//\\\//g')

# show worktree list
worktree_list() {
  git worktree list
}

help_message() {
  echo -e "wt lets you switch between your git worktrees with speed.\n"
  echo "Usage:"
  echo -e "\twt <worktree-name>: search for worktree names and change to that directory."
  echo -e "\twt list: list out all the git worktrees."
  echo -e "\twt update: update to the latest release of worktree switcher."
  echo -e "\twt version: show the CLI version."
  echo -e "\twt help: shows this help message."
}

goto_main_worktree() {
  main_worktree=$(git worktree list --porcelain | grep -E 'worktree ' | awk '{print $0; exit}' | cut -d ' ' -f2-)

  if [ "$main_worktree" = "" ]; then
    :
  else
    echo Changing to main worktree at: "$main_worktree"
    cd "$main_worktree"
    exec "$SHELL"
  fi
}

download_latest_update() {
  download_url=$(curl -sL "$RELEASE_API_URL" | jq -r '.assets[0].browser_download_url')

  echo "Downloading latest version $fetched_tag_name"
  curl -sL -o "$TMP_PATH" "$download_url"

  echo "Updating to latest version..."
  chmod +x "$TMP_PATH"
  sudo mv "$TMP_PATH" "$BINARY_PATH"
  rm -f "$TMP_PATH"

  echo "You are using the latest version of worktree switcher: $fetched_tag_name"
}

check_release_version() {
  fetched_tag_name=$(curl -sL "$RELEASE_API_URL" | jq -r '.tag_name')

  if [ "$fetched_tag_name" == "$VERSION" ]; then
    echo "You have the latest version of worktree switcher!"
    echo "Version: $VERSION"
  else
    download_latest_update
  fi
}

update() {
  if [ "$(command -v jq)" = "" ]; then
    echo "jq is required for updating worktree switcher via this command."
    echo -e "Install jq:\n$JQ_URL.\n"
    echo -e "Or visit:\n$RELEASE_URL"
  else
    check_release_version
  fi
}

if [ "${args[0]}" = "" ]; then
  help_message
  echo "$(worktree_list)" | fzf | {
    echo cd "$directory"
    cd "$directory"
    # exec "$SHELL"
  }
  exit 0
fi

case "${args[0]}" in
  list)
    worktree_list
    ;;
  create)
    shift
    if [ $# -ne 2 ]; then
      echo "Please provide a branch name." 1>&2
      echo "Usage: wt create <branch-name> <from-branch>" 1>&2
      exit 1
    fi
    git worktree add -b "$1" "$1" "$2"
    ;;
  add)
    shift
    if [ $# -ne 1 ]; then
      echo "Please provide a branch name." 1>&2
      echo "Usage: wt add <branch-name>" 1>&2
      exit 1
    fi
    git worktree add "$1"
    # git worktree add "$1" "$1"
    ;;
  update)
    update
    ;;
  help)
    help_message
    ;;
  version)
    echo Version: "$VERSION"
    ;;
  -)
    goto_main_worktree
    ;;
  ch)
    shift
    directory=$(git worktree list --porcelain | grep "^worktree.*$1$" | cut -f 2- -d ' ')
    ;;
  *)
    echo "Invalid argument: ${args[0]}"
    ;;
esac

# Change worktree based on user argument.
change_worktree() {
  echo cd "$directory"
  cd "$directory"
  exec "$SHELL"
}

# If directory variable is not empty then change worktree
if [ "$directory" = "" ]; then
  :
else
  change_worktree
fi

# # input_args=${*:-}
# # args=("$input_args")
#
# (command -v fzf &>/dev/null) && FZF_FOUND="installed" || FZF_FOUND="not installed"
#
# # -- set some useful vars for executable info:
# __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# __file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
# __base="$(basename "$__file" .sh)"
# __root="$(cd "$(dirname "$__dir")" && pwd)"
# # shellcheck disable=SC2034,SC2015
# __invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"
#
# # -- friendly help if -h option given
# function __help() {
#   printf -- "Usage: %s [commands] [WORKTREE | FUZZY_PATTERN]\n" "$__base"
#   printf -- "\n"
#   printf -- "   Commands:\n"
#   printf -- "     list              List checked out worktrees. \n"
#   printf -- "     list -b           List remote branches/worktrees. \n"
#   printf -- "     -                 Check out Main worktree. \n"
#   printf -- "     help              This help text you're presently reading. ðŸ˜„\n"
#   printf -- "\n"
#   printf -- "   Dependencies:\n"
#   printf -- "     fzf             (%s)\n" "$FZF_FOUND"
#   printf -- "\n"
#
#   exit 0
# }
#
# command="${1:-list}"
# directory=""
#
# case "$command" in
#   help)
#     __help
#     ;;
#   ls | list)
#     # shift "$1"
#     # worktree_option="${1:-}"
#     # case "$worktree_option" in
#     #   -b)
#     #     git branch -r
#     #     ;;
#     #   *)
#     #     git worktree list --porcelain
#     #     ;;
#     # esac
#     git worktree list --porcelain | awk '$1 == "branch"  {print $2}' | sed 's#^refs/heads/##g'
#     ;;
#   *)
#     # shift
#     directory="$@"
#     ;;
#     # -)
#     #   echo "in -"
#     #   directory=$(git worktree list --porcelain | grep -E 'worktree ' | awk '{print $0; exit}' | cut -d ' ' -f2-)
#     #   ;;
#     # \?)
#     #   # NOTE: this covers the case where an optarg may not be provided
#     #   # and will exit errored
#     #   echo "No argument given" 1>&2
#     #   exit 1
#     #   ;;
#     #   # *)
#     #   #   directory=$(git worktree list --porcelain | grep -E 'worktree ' | awk '/'"$worktree"'/ {print; exit}' | cut -d ' ' -f2- | fzf)
#     #   #   ;;
# esac
# echo "directory: $directory"
#
# # # Change worktree based on user argument.
# # function __change_worktree() {
# #   local directory_target="${1:-}"
# #   if [[ "$directory_target" == "" ]]; then
# #     git worktree list
# #   else
# #     log_info Changing to worktree at: "$directory_target"
# #     cd "$directory_target"
# #     # exec "$SHELL"
# #   fi
# # }
# #
# # # while getopts "h" OPTION; do
# # #   case $OPTION in
# # #     h)
# # #       __help
# # #       ;;
# # #
# # #     \?)
# # #       # NOTE: this covers the case where an optarg may not be provided
# # #       # and will exit errored
# # #       echo "Invalid Option: -$OPTARG" 1>&2
# # #       exit 1
# # #       ;;
# # #
# # #     :)
# # #       echo "Invalid Option: -$OPTARG requires an argument" 1>&2
# # #       exit 1
# # #       ;;
# # #   esac
# # # done
# # # # shift $((OPTIND - 1))
# # # shift "$(($OPTIND - 1))"
# #
# # # -- this is our given session_name param, sans options
# # worktree="${1:-}"
# # directory=""
# #
# # case "$worktree" in
# #   help)
# #     __help
# #     ;;
# #   list)
# #     shift "$1"
# #     worktree_option="${1:-}"
# #     case "$worktree_option" in
# #       -b)
# #         git branch -r
# #         ;;
# #       *)
# #         git worktree list --porcelain
# #         ;;
# #     esac
# #     ;;
# #   -)
# #     echo "in -"
# #     directory=$(git worktree list --porcelain | grep -E 'worktree ' | awk '{print $0; exit}' | cut -d ' ' -f2-)
# #     ;;
# #   \?)
# #     # NOTE: this covers the case where an optarg may not be provided
# #     # and will exit errored
# #     echo "No argument given" 1>&2
# #     exit 1
# #     ;;
# #     # *)
# #     #   directory=$(git worktree list --porcelain | grep -E 'worktree ' | awk '/'"$worktree"'/ {print; exit}' | cut -d ' ' -f2- | fzf)
# #     #   ;;
# # esac
# # # echo "directory: $directory"
# # # If directory variable is not empty then change worktree
# # if [[ "$directory" == "" ]]; then
# #   worktrees="$(git worktree list --porcelain | grep -E 'worktree ' | awk '/'"$worktree"'/ {print;}' | cut -d ' ' -f2-)"
# #   if [[ "$worktrees" -gt "1" ]]; then
# #     __change_worktree "$("$worktrees" | fzf)"
# #   else
# #     # git worktree list && __help
# #     __help
# #   fi
# # else
# #   __change_worktree "$directory"
# # fi
