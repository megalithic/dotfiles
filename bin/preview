#!/usr/bin/env bash

source "${HOME}/.dotfiles/config/zsh/lib/helpers.zsh"

[ "$1" = "" ] && exit 1

case "$(uname -a)" in
*Darwin*) UEBERZUG_TMP_DIR="$TMPDIR" ;;
*) UEBERZUG_TMP_DIR="/tmp" ;;
esac

cleanup() {
  ueberzugpp cmd -s "$SOCKET" -a exit
}
trap cleanup HUP INT QUIT TERM EXIT

# FIFO="/tmp/fzf_preview_fifo"
#
# cleanup() {
#   pkill ueberzugpp
#   rm /tmp/ueberzugpp-*.socket 2>/dev/null
#   rm -f "$FIFO"
# }
#
# if [ "$1" = "--cleanup" ]; then
#   cleanup
#   exit 0
# fi
#
# case "$1" in
#   "--ueberzugpp")
#     set -- "$2" >/dev/null
#     ueberzugpp_x="$(($(tput cols) / 2 + 1))"
#     ueberzugpp_y="1"
#     ueberzugpp_width="$FZF_PREVIEW_COLUMNS"
#     ueberzugpp_height="$FZF_PREVIEW_LINES"
#     ueberzug_image="chafa" # chafa, x11, wayland, kitty, sixel, iterm2
#     image_previewer="ueberuzgpp"
#     [ -p "$FIFO" ] || mkfifo "$FIFO"
#     ;;
# esac
#
# start_preview() {
#   echo '{"path": "'"$1"'", "action": "add", "identifier": "fzfpreview", "x": "'"$ueberzugpp_x"'", "y": "'"$ueberzugpp_y"'", "width": "'"$ueberzugpp_width"'", "height": "'"$ueberzugpp_height"'"}' >"$FIFO"
# }

handle_image() {
  case "$1" in
  image/*)
    # chafa "$2" -f symbols
    # kitty icat --clear --transfer-mode file "$2"
    # kitty icat --stdin=no "$2"
    kitty icat --clear --transfer-mode=file --stdin=no --place=200x200@10x0 "$2"
    # kitty icat --clear --transfer-mode=file --stdin=no --place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@0x0 "$2"
    ;;
  *) exiftool -All "$2" ;;
  esac
}

handle_text() {
  case "$2" in
  *.md) glow --style=auto "$2" ;;
  *.htm | *.html) elinks -dump "$2" ;;
  *) bat -p --color=always --number "$2" ;;
    # *) bat -p --color=always --style=header,grid --line-range :300 "$2" ;;
    # *) bat --theme=base16 --color=always --paging=never --number --italic-text=never --tabs=2 --wrap=never "$2" ;;
  esac
}

test -d "$HOME/.cache/fzf" || mkdir -p "$HOME/.cache/fzf"
# cache="$HOME/.cache/fzf/thumbnail.$(stat --printf '%n\0%i\0%F\0%s\0%W\0%Y' -- "$(readlink -f "$1")" | sha256sum | awk '{print $1}'))"
cache="$HOME/.cache/fzf/thumbnail.$(stat "$(readlink -f "$1")" | sha256sum | awk '{print $1}')"
mime="$(file --brief --mime-type "$1")"

printf "î˜Ž %s\n\n" "$mime"
case "$mime" in
text/*) handle_text "$mime" "$1" ;;
inode/directory) exa -ahFT -L=1 --color=always --icons --sort=size --group-directories-first "$1" ;;
inode/symlink) printf "symlink to: \e[34m%s\e[0m." "$(readlink "$1")" ;;
application/json) jq --color-output < "$1" ;;
application/x-bittorrent) transmission-show --unsorted "$1" ;;
application/x-executable | application/x-pie-executable | application/x-sharedlib) readelf --wide --demangle=auto --all "$1" ;;
application/zip) atool --list "$1" ;;
application/x-x509-ca-cert) openssl x509 -text -noout -in "$1" ;;
application/pdf)
  pdftoppm -jpeg -f 1 -singlefile "$1" "$cache"
  handle_image "image/*" "$cache.jpg"
  ;;
image/*)
  handle_image "$mime" "$1"
  ;;
video/*)
  ffmpegthumbnailer -i "$1" -o "${cache}.jpg" -s 200
  handle_image "image/*" "${cache}.jpg"
  ;;
# image/* | video/*)
#   handle_image "$mime" "$1"
#   stop_preview
#   ;;
font/* | application/vnd.ms-opentype)
  echo "previewing font.."
  preview_font "$1"
  ;;
*)
  case "$(printf "%s\n" "$(readlink -f "$1")" | awk '{print tolower($0)}')" in
  *.tgz | *.tar.gz) tar tzf "$1" ;;
  *.tar.bz2 | *.tbz2) tar tjf "$1" ;;
  *.tar.txz | *.txz) xz --list "$1" ;;
  *.tar) tar tf "$1" ;;
  *.zip | *.jar | *.war | *.ear | *.oxt) unzip -l "$1" ;;
  *.rar) unrar l "$1" ;;
  *.7z) 7z l "$1" ;;
  *.[1-8]) man "$1" | col -b ;;
  *.o) nm "$1" ;;
  *.torrent) transmission-show "$1" ;;
  *.iso) iso-info --no-header -l "$1" ;;
  *.odt | *.ods | *.odp | *.sxw) odt2txt "$1" ;;
  *.doc) catdoc "$1" ;;
  *.docx) docx2txt "$1" - ;;
  *.xls | *.xlsx)
    ssconvert --export-type=Gnumeric_stf:stf_csv "$1" "fd://1" | batorcat --language=csv
    ;;
  *.wav | *.mp3 | *.flac | *.m4a | *.wma | *.ape | *.ac3 | *.og[agx] | *.spx | *.opus | *.as[fx] | *.mka)
    exiftool "$1"
    ;;
  *.svg)
    [ ! -f "${cache}.jpg" ] &&
      convert "$1" "${cache}.jpg"
    handle_image "image/*" "${cache}.jpg"
    ;;
  *)
    exit 1
    ;;
  esac
  ;;
esac
