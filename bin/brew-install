#!/bin/zsh

#set -x

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

[[ -f "$HOME/.dotfiles/config/zsh/lib/helpers.zsh" ]] && source "$HOME/.dotfiles/config/zsh/lib/helpers.zsh"

# set -euo pipefail

# clean_exit defined in helpers.zsh
# trap 'clean_exit $? $LINENO' EXIT

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename "$__file" .sh)"
__root="$(cd "$(dirname "$__dir")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "$__file")$( (($#)) && printf ' %q' "$@" || true)"

do_update() {
  export NONINTERACTIVE=1
  brew update --verbose
  brew outdated --verbose
  brew upgrade --force --verbose
}

do_install() {
  log "installing homebrew ($(uname)).."
  export NONINTERACTIVE=1
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" &&
  #/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" &&
  log_ok "completed installing brew." ||
  exit 1

  if [[ "$?" == 0 ]]; then
    brew bundle --verbose --force --file=~/.dotfiles/brew/Brewfile
  fi
}

while getopts "uf" OPTION; do
  case $OPTION in
    u)
      do_update
      exit 0
      ;;

    f)
      do_install && do_update
      exit 0
      ;;

    \?)
      echo "invalid option: -$OPTARG" 1>&2
      exit 1
      ;;

  esac
done
shift $((OPTIND - 1))

if type "brew" &>/dev/null; then
  log_warn "brew already installed; updating instead."
  do_update
else
  do_install && do_update
fi
