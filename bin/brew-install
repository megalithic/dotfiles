#!/bin/bash

if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME="$HOME/.local/share"
fi
if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME="$HOME/.config"
fi

[[ -f "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh" ]] && source "${XDG_CONFIG_HOME}/zsh/lib/helpers.zsh"

set -euo pipefail

# clean_exit defined in helpers.zsh
# trap 'clean_exit $? $LINENO' EXIT

# -- set some useful vars for executable info:
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)"
# shellcheck disable=SC2034,SC2015
__invocation="$(printf %q "${__file}")$( (($#)) && printf ' %q' "$@" || true)"

FORCE_INSTALL="false"

while getopts "f" OPTION; do
  case $OPTION in

    f)
      FORCE_INSTALL="true"
      ;;

    \?)
      echo "invalid option: -$OPTARG" 1>&2
      exit 1
      ;;

  esac
done
shift $((OPTIND - 1))

do_install() {
  log "installing homebrew ($(uname)).."
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" &&
    log_ok "completed installing brew." ||
    exit 1
}

if [[ $(type "brew" &>/dev/null) && $FORCE_INSTALL == "false" ]]; then
  log_warn "brew already installed; updating instead."

  if [[ "$(uname)" == "Darwin" ]]; then
    export NONINTERACTIVE=1
    brew update
    brew outdated
    brew upgrade
  elif [[ "$(uname)" == "Linux" ]]; then
    sudo -u "$SUDO_USER" brew update
    sudo -u "$SUDO_USER" brew outdated
    sudo -u "$SUDO_USER" brew upgrade
  fi

elif [[ ! $(type "brew" &>/dev/null) || $FORCE_INSTALL == "true" ]]; then
  do_install
fi
