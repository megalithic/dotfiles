[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "stripped_doc" : [
          "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)"
        ],
        "def" : "URLDispatcher.default_handler",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.default_handler",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name" : "default_handler"
      },
      {
        "doc" : "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "stripped_doc" : [
          "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`"
        ],
        "def" : "URLDispatcher.decode_slack_redir_urls",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.decode_slack_redir_urls",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name" : "decode_slack_redir_urls"
      },
      {
        "doc" : "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\", \"function\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https:\/\/www.lua.org\/pil\/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`. If \"application bundle ID\" is specified, that application will be used to open matching URLs. If no \"application bundle ID\" is specified, but \"function\" is provided (and is a Lua function) it will be called with the URL.",
        "stripped_doc" : [
          "URL dispatch rules.",
          "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\", \"function\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https:\/\/www.lua.org\/pil\/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`. If \"application bundle ID\" is specified, that application will be used to open matching URLs. If no \"application bundle ID\" is specified, but \"function\" is provided (and is a Lua function) it will be called with the URL."
        ],
        "def" : "URLDispatcher.url_patterns",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.url_patterns",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "URL dispatch rules.",
        "name" : "url_patterns"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "def" : "URLDispatcher.logger",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name" : "logger"
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "Route URLs to different applications with pattern matching",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Route URLs to different applications with pattern matching\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/URLDispatcher.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/URLDispatcher.spoon.zip)\n\nSets Hammerspoon as the default browser for HTTP\/HTTPS links, and\ndispatches them to different apps according to the patterns defined\nin the config. If no pattern matches, `default_handler` is used.",
    "items" : [
      {
        "doc" : "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "stripped_doc" : [
          "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`"
        ],
        "def" : "URLDispatcher.decode_slack_redir_urls",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.decode_slack_redir_urls",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "If true, handle Slack-redir URLs to apply the rule on the destination URL. Defaults to `true`",
        "name" : "decode_slack_redir_urls"
      },
      {
        "doc" : "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "stripped_doc" : [
          "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)"
        ],
        "def" : "URLDispatcher.default_handler",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.default_handler",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Bundle ID for default URL handler. (Defaults to `\"com.apple.Safari\"`)",
        "name" : "default_handler"
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon."
        ],
        "def" : "URLDispatcher.logger",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name" : "logger"
      },
      {
        "doc" : "URL dispatch rules.\nA table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\", \"function\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https:\/\/www.lua.org\/pil\/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`. If \"application bundle ID\" is specified, that application will be used to open matching URLs. If no \"application bundle ID\" is specified, but \"function\" is provided (and is a Lua function) it will be called with the URL.",
        "stripped_doc" : [
          "URL dispatch rules.",
          "A table containing a list of dispatch rules. Each rule should be its own table in the format: `{ \"url pattern\", \"application bundle ID\", \"function\" }`, and they are evaluated in the order they are declared. Note that the patterns are [Lua patterns](https:\/\/www.lua.org\/pil\/20.2.html) and not regular expressions. Defaults to an empty table, which has the effect of having all URLs dispatched to the `default_handler`. If \"application bundle ID\" is specified, that application will be used to open matching URLs. If no \"application bundle ID\" is specified, but \"function\" is provided (and is a Lua function) it will be called with the URL."
        ],
        "def" : "URLDispatcher.url_patterns",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher.url_patterns",
        "type" : "Variable",
        "returns" : [

        ],
        "desc" : "URL dispatch rules.",
        "name" : "url_patterns"
      },
      {
        "doc" : "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http:\/\/www.hammerspoon.org\/docs\/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key\/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "stripped_doc" : [
          "Dispatch a URL to an application according to the defined `url_patterns`.",
          "",
          "Parameters (according to the [httpCallback](http:\/\/www.hammerspoon.org\/docs\/hs.urlevent.html#httpCallback) specification):",
          " * scheme - A string containing the URL scheme (i.e. \"http\")",
          " * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")",
          " * params - A table containing the key\/value pairs of all the URL parameters",
          " * fullURL - A string containing the full, original URL"
        ],
        "def" : "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Dispatch a URL to an application according to the defined `url_patterns`.",
        "name" : "dispatchURL"
      },
      {
        "doc" : "Start dispatching URLs according to the rules",
        "stripped_doc" : [
          "Start dispatching URLs according to the rules"
        ],
        "def" : "URLDispatcher:start()",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher:start()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start dispatching URLs according to the rules",
        "name" : "start"
      }
    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Dispatch a URL to an application according to the defined `url_patterns`.\n\nParameters (according to the [httpCallback](http:\/\/www.hammerspoon.org\/docs\/hs.urlevent.html#httpCallback) specification):\n * scheme - A string containing the URL scheme (i.e. \"http\")\n * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")\n * params - A table containing the key\/value pairs of all the URL parameters\n * fullURL - A string containing the full, original URL",
        "stripped_doc" : [
          "Dispatch a URL to an application according to the defined `url_patterns`.",
          "",
          "Parameters (according to the [httpCallback](http:\/\/www.hammerspoon.org\/docs\/hs.urlevent.html#httpCallback) specification):",
          " * scheme - A string containing the URL scheme (i.e. \"http\")",
          " * host - A string containing the host requested (e.g. \"www.hammerspoon.org\")",
          " * params - A table containing the key\/value pairs of all the URL parameters",
          " * fullURL - A string containing the full, original URL"
        ],
        "def" : "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher:dispatchURL(scheme, host, params, fullUrl)",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Dispatch a URL to an application according to the defined `url_patterns`.",
        "name" : "dispatchURL"
      },
      {
        "doc" : "Start dispatching URLs according to the rules",
        "stripped_doc" : [
          "Start dispatching URLs according to the rules"
        ],
        "def" : "URLDispatcher:start()",
        "parameters" : [

        ],
        "notes" : [

        ],
        "signature" : "URLDispatcher:start()",
        "type" : "Method",
        "returns" : [

        ],
        "desc" : "Start dispatching URLs according to the rules",
        "name" : "start"
      }
    ],
    "Field" : [

    ],
    "name" : "URLDispatcher"
  }
]