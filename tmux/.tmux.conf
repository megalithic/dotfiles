# -- [ prefix ] ----------------------------------------------------------------
# Prefix like it's gnu-screen
unbind C-a
unbind C-b

# set -g prefix2 C-a
# bind C-a send-prefix
# bind C-a send-prefix

set -g prefix C-a
set -g prefix2 C-space
bind C-a send-prefix
bind C-space send-prefix

# bind C-a send-prefix


# -- [ general settings ] ------------------------------------------------------
set -g history-limit 10000
set -g default-shell "/bin/bash"
# set -g default-shell "/usr/local/bin/zsh"
# FIXME: still need this?
# set -g default-command "reattach-to-user-namespace -l $SHELL"       # Fix LSOpenURLsWithRole() error on OS X. Requires reattach-to-user-namespace to be installed.

set -g default-terminal "xterm-kitty"
# set -g default-terminal "tmux-256color"
# # True colour support, the terminal info is from the outside of tmux https://sunaku.github.io/tmux-24bit-color.html#usage
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",xterm-kitty:Tc"
# # Neovim cursor changing support https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# # Italics support
set -as terminal-overrides ',xterm*:sitm=\E[3m'
# # Strikethrough support https://github.com/tmux/tmux/issues/612#issuecomment-288408841
set -as terminal-overrides ',xterm*:smxx=\E[9m'

set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

# set window and pane index to 1 (0 by default)
set -g base-index 1
setw -g pane-base-index 1


# = mouse behavior --
# set -g mouse on # FIXME: this potentially jacks with kitty's mouse copy selection stuff
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= \; send-keys -M

setw -g xterm-keys on
setw -g aggressive-resize on          # allows multiple sessions to connect to the same server. only shows the resize border when both sessions are on the same windowe
set -g assume-paste-time 0            # Disable assume-paste-time, so that iTerm2's "Send Hex Codes" feature works with tmux 2.1. (https://github.com/edruder/maximum-awesome/commit/9e3d07f450ac60ec142c82e8b2ffb2777bf99fb4)
set -g repeat-time 0                  # Allow the arrow key to be used immediately after changing windows

# Neovim https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set -sg escape-time 0
set -g focus-events on

set -w -g wrap-search off             # Don't wrap searches; it's super confusing given tmux's reverse-ordering of position info in copy mode.
set -g detach-on-destroy off

# loud or quiet?
setw -g monitor-activity on
setw -g visual-activity off
# set -g visual-bell off
# set -g bell-action none


# -- [ key bindings ] ----------------------------------------------------------
# = to see current bindings: `tmux list-keys`

setw -g mode-keys vi

bind -r C-R source-file ~/.tmux.conf \; display-message "Configuration reloaded."
bind r refresh-client

# backward search
bind -T copy-mode-vi "?" \
  command-prompt -ip "search up:" "send -X search-backward-incremental '%%%'"
bind -T copy-mode-vi "/" \
  command-prompt -ip "search down:" "send -X search-forward-incremental '%%%'"

# = splitting panes --
bind '|'  split-window -h -c "#{pane_current_path}" \;
bind '\'  split-window -h -c "#{pane_current_path}" \;
bind '_'  split-window -v -c "#{pane_current_path}" \;
bind '-'  split-window -v -c "#{pane_current_path}" \;

unbind c
bind c new-window -ac '#{pane_current_path}'
# bind -r C-t new-window -c "#{pane_current_path}"
bind T command-prompt -p "(rename pane)" 'select-pane -T "%%"'

bind -r C-q confirm-before 'kill-session'
bind -r C-x kill-pane
bind -r C-q kill-window
bind C-d detach			# prefix, d


# = resizing --
bind -r H resize-pane -L 5      # grow the current pane leftwards with <C-t>H
bind -r J resize-pane -D 5      # grow the current pane downwards with <C-t>J
bind -r K resize-pane -U 5      # grow the current pane upwards with <C-t>K
bind -r L resize-pane -R 5      # grow the current pane rightwards with <C-t>L

                                # Any of the above can be repeated easily by holding down Ctrl,
                                # hitting 'a' and then pressing H, J, K, or L repeatedly until the
                                # pane is the desired size.


# = reorder windows --
bind -r C-H swap-window -t -1 # move window one position to the left
bind -r C-L swap-window -t +1 # move window one position to the right
# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1


# = vim-style pane selection --

# Smart pane switching with awareness of vim splits (from https://github.com/christoomey/vim-tmux-navigator)
# https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(n?vim?x?)(diff)?$"'
is_any='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(weechat|irc|chats|view|n?vim?x?)(diff)?$"'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_nvim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
is_ssh="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?ssh$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
is_irc="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(weechat|irc|chats)?$'"
bind -n C-h if-shell "($is_vim || $is_irc || $is_ssh)" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "($is_any || $is_vim || $is_fzf || $is_irc || $is_ssh)" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "($is_any || $is_vim || $is_fzf || $is_irc || $is_ssh)" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "($is_vim || $is_irc || $is_ssh)" "send-keys C-l" "select-pane -R"
bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R
bind -r C-h run "tmux select-pane -L"
bind -r C-j run "tmux select-pane -D"
bind -r C-k run "tmux select-pane -U"
bind -r C-l run "tmux select-pane -R"

# Make the current window the first window
bind T swap-window -t 1

# find session
  bind C-f command-prompt -p find-session 'switch-client -t %%'
# fuzzy find session
bind s split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"
# break into new session
bind C-b send-keys 'tat && exit' 'C-m'

# put us in copy-mode, where i typically then hit ctrl-b again to scroll up
bind Escape copy-mode
bind -r C-b copy-mode -u

# use vim keybindings in search/copy mode
setw -g other-pane-height 25
setw -g other-pane-width 80

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# = copy mode --

# select text with 'v' and copy with 'y'
# https://github.com/zanshin/dotfiles/blob/master/tmux/tmux.conf
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi Escape send-keys -X cancel
unbind   -T copy-mode-vi 'Enter'
bind -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind -T copy-mode-vi y if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"
# bind -T copy-mode-vi MouseDragEnd1Pane if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# Save entire tmux history to a file - file will be on machine where tmux is
# running
bind * command-prompt -p 'save window pane to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# = sessions --
# https://ronnieroller.com/tmux#management-script

# = buffers --

# bind b list-buffers  # list paste buffers
# bind p paste-buffer  # paste from the top paste buffer
# bind P choose-buffer -Z # choose which buffer to paste from


# -- [ status bar ] ------------------------------------------------------------

set -g status on
set -g status-interval 5
set -g status-justify left
set -g status-position top
set -g set-titles on                        # set terminal title
set -g allow-rename off
set -g set-titles-string "" # "#S / #W"
# set -g set-titles-string "#S | #I [ #W ]"
set -g set-titles-string "#W"
set -g display-time 1500 # tmux messages are displayed for 1.5 seconds
set -g display-panes-time 800 # slightly longer pane indicators display time
setw -g automatic-rename on
set -g renumber-windows on # re-number windows when one is closed


# = theme/colors/layout --

if-shell 'test -f "$HOME/.tmux.conf.theme-forest_night"' 'source -q $HOME/.tmux.conf.theme-forest_night'
# if-shell 'test -f "$HOME/.tmux.conf.theme-nova"' 'source -q $HOME/.tmux.conf.theme-nova'
# if-shell 'test -f "$HOME/.tmux.conf.theme-zephyr"' 'source -q $HOME/.tmux.conf.theme-zephyr'
# if-shell 'test -f "$HOME/.tmux.conf.theme-gruvbox"' 'source -q $HOME/.tmux.conf.theme-gruvbox'


# -- [ tpm ] -------------------------------------------------------------------
# tmux plugin manager: github.com/tmux-plugins/tpm
set-environment -g TMUX_PLUGIN_MANAGER_PATH '$HOME/.tmux/plugins/'
set -g @dnd_on_icon "\uf59f DND#[fg=colour255] ⋮ "
set -g @dnd_off_icon ""
set -g @prefix_highlight_fg             'red'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_prefix_prompt  'Wait⚋'
set -g @prefix_highlight_copy_prompt    'Copy⚋'
set -g @prefix_highlight_sync_prompt    'Sync⚋'
set -g @prefix_highlight_empty_prompt   '      '          # default is '' (empty char)
set -g @fuzzback-bind b
set -g @fuzzback-popup 1

## Restore Vim sessions
set -g @resurrect-strategy-vim 'session'
## Restore Neovim sessions
set -g @resurrect-strategy-nvim 'session'
## Restore Panes
set -g @resurrect-capture-pane-contents 'on'
## Restore last saved environment (automatically)
set -g @continuum-restore 'on'

# plugin settings
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-sessionist'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'NHDaly/tmux-better-mouse-mode'
set -g @plugin 'megalithic/tmux-dnd-status'
set -g @plugin 'roosta/tmux-fuzzback' # prefix + b
# set -g @plugin 'wfxr/tmux-fzf-url'

# Tmux + FZF utils (prefix-F) / https://github.com/sainnhe/tmux-fzf
# set -g @plugin 'sainnhe/tmux-fzf'
# set -g @plugin 'wfxr/tmux-fzf-url'

# set -g @plugin 'dkarter/tmux-ff-pane'# Fuzzy find panes (prefix-P)
# # set -g @tmux-fzf-launch-key 'T'
# set -g @plugin 'yardnsm/tmux-1password'
# set -g @plugin 'tmux-plugins/tmux-urlview' # opens the bottom pane of all links; can't get it to actually open links in browser though
# set -g @plugin 'jbnicolai/tmux-fpp'
# set -g @plugin 'Morantron/tmux-fingers'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-logging'

# install tpm if not already installed
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
run-shell '~/.tmux/plugins/tpm/tpm'

# # = load additional scripts --
# if-shell 'test "$PLATFORM" = "macos"' 'source -q ~/.tmux-macos.conf' 'source -q ~/.tmux-linux.conf'
# if-shell 'test -f "~/.tmux.config.local"' 'source -q ~/.tmux.config.local'

# vim: ft=tmux tw=0
