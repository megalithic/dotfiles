# -- [ prefix ] ----------------------------------------------------------------

unbind C-a
unbind C-b
unbind C-space

# NOTE / FIXME:
# C-a prefix binding is required for my kitty.conf pass-through bindings 😢
set -g prefix C-a
set -g prefix2 C-space
bind C-a send-prefix
bind C-space send-prefix

# -- [ general settings ] ------------------------------------------------------

set -g history-limit 999999999
# set -g default-shell "/bin/zsh"
# set -g default-shell "/bin/bash"
set -g default-shell "/usr/local/bin/zsh"
# FIXME: still need this?
# set-option -g default-command "/usr/local/bin/zsh"
# set -g default-command "reattach-to-user-namespace -l $SHELL"       # Fix LSOpenURLsWithRole() error on OS X. Requires reattach-to-user-namespace to be installed.

# https://github.com/cdown/dotfiles/blob/master/.tmux.conf
set -g update-environment "DISPLAY SSH_AUTH_SOCK SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION SSH_HOME WINDOWID XAUTHORITY SSHHOME TMUX"

set -g default-terminal "xterm-kitty"
# set -g default-terminal "tmux-256color"
# # True colour support, the terminal info is from the outside of tmux https://sunaku.github.io/tmux-24bit-color.html#usage
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",xterm-kitty:Tc"
# # Neovim cursor changing support https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# # Italics support
set -as terminal-overrides ',xterm*:sitm=\E[3m'
# # Strikethrough support https://github.com/tmux/tmux/issues/612#issuecomment-288408841
set -as terminal-overrides ',xterm*:smxx=\E[9m'

set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support

# - Add colors to underscore/undercurl inside neovim [source: https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux]
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

# set window and pane index to 1 (0 by default)
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on # re-number windows when one is closed


# = mouse behavior --
# set -g mouse on # FIXME: this potentially jacks with kitty's mouse copy selection stuff
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= \; send-keys -M

setw -g xterm-keys on
setw -g aggressive-resize on          # allows multiple sessions to connect to the same server. only shows the resize border when both sessions are on the same windowe
set -g assume-paste-time 0            # Disable assume-paste-time, so that iTerm2's "Send Hex Codes" feature works with tmux 2.1. (https://github.com/edruder/maximum-awesome/commit/9e3d07f450ac60ec142c82e8b2ffb2777bf99fb4)
set -g repeat-time 0                  # Allow the arrow key to be used immediately after changing windows

# Neovim https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set -sg escape-time 0
set -g focus-events on

set -w -g wrap-search off             # Don't wrap searches; it's super confusing given tmux's reverse-ordering of position info in copy mode.
set -g detach-on-destroy off

# loud or quiet?
setw -g monitor-activity on
setw -g visual-activity off
# set -g visual-bell off
# set -g bell-action none


# -- [ key bindings ] ----------------------------------------------------------
# = to see current bindings: `tmux list-keys` or <prefix-?>

setw -g mode-keys vi

bind -r C-R source-file "~/.config/tmux/tmux.conf" \; display-message "Configuration reloaded."
bind r refresh-client

# backward search
bind -T copy-mode-vi "?" \
  command-prompt -ip "search up:" "send -X search-backward-incremental '%%%'"
bind -T copy-mode-vi "/" \
  command-prompt -ip "search down:" "send -X search-forward-incremental '%%%'"

# = splitting panes --
bind '|'  split-window -h -c "#{pane_current_path}" \;
bind '\'  split-window -h -c "#{pane_current_path}" \;
bind '_'  split-window -v -c "#{pane_current_path}" \;
bind '-'  split-window -v -c "#{pane_current_path}" \;

unbind c
bind c new-window -ac '#{pane_current_path}'
# bind -r C-t new-window -c "#{pane_current_path}"
bind T command-prompt -p "(rename pane)" 'select-pane -T "%%"'

bind -r C-q confirm-before 'kill-session'
bind -r C-x kill-pane
bind -r C-q kill-window
bind C-d detach			# prefix, d

# Smart pane switching with awareness of vim splits
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#   | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
#   | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

# bind -n C-h run "($is_vim && tmux send-keys C-h) || \
#                  tmux select-pane -L"

# bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
#                  ($is_fzf && tmux send-keys C-j) || \
#                  tmux select-pane -D"

# bind -n C-k run "($is_vim && tmux send-keys C-k) || \
#                  ($is_fzf && tmux send-keys C-k)  || \
#                  tmux select-pane -U"

# bind -n C-l run "($is_vim && tmux send-keys C-l) || \
#                  tmux select-pane -R"

# bind-key -n C-'\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# = resizing --
bind -r H resize-pane -L 5      # grow the current pane leftwards with <C-t>H
bind -r J resize-pane -D 5      # grow the current pane downwards with <C-t>J
bind -r K resize-pane -U 5      # grow the current pane upwards with <C-t>K
bind -r L resize-pane -R 5      # grow the current pane rightwards with <C-t>L

                                # Any of the above can be repeated easily by holding down Ctrl,
                                # hitting 'a' and then pressing H, J, K, or L repeatedly until the
                                # pane is the desired size.


# = reorder windows --
bind -r C-H swap-window -t -1 # move window one position to the left
bind -r C-L swap-window -t +1 # move window one position to the right
# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1

# Make the current window the first window
bind T swap-window -t 1

# = sessions --
# create new session
bind C-c command-prompt -p " new session ->" "run-shell \"ftm %1\""


# = popups --
# REF: https://github.com/meain/dotfiles/blob/master/tmux/.tmux.conf#L209-L226
# fuzzy find/switch session
# NOTE: in order for my fzf thing to work correctly in a tmux popup, we have to
# kill the popup without caring about exiting properly, e.g. no -E or -EE used:
bind C-space display-popup -w "55%" -h "50%" "ftm -p && tmux display-popup -C"
# REF: https://qmacro.org/autodidactics/2021/08/12/session-switching-with-the-tmux-menu/

# run an arbitrary command in a popup; interactive
bind C-e display-popup -E -w "45%" -h "35%" "zsh -l"

# quick zk note
bind C-n display-popup -EE -w "45%" -h "35%" "nvim -c ':ZkNew'"

# quickly see htop cpu usage
bind C-h display-popup -E -w "90%" -h "90%" "htop -s PERCENT_CPU"

# quickly switch a predefined slack status
bind C-s display-popup -w "25%" -h "25%" "slack -pd; tmux display-popup -C"

# put us in copy-mode, where i typically then hit ctrl-b again to scroll up
bind Escape copy-mode
bind -r C-b copy-mode -u
bind -r C-v copy-mode -u

# use vim keybindings in search/copy mode
setw -g other-pane-height 25
setw -g other-pane-width 80

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# = copy mode --

# select text with 'v' and copy with 'y'
# https://github.com/zanshin/dotfiles/blob/master/tmux/tmux.conf
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi Escape send-keys -X cancel
unbind -T copy-mode-vi 'Enter'
bind -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind -T copy-mode-vi y if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"
# bind -T copy-mode-vi MouseDragEnd1Pane if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# REF: from monsieur @nicknisi -> https://github.com/nicknisi/dotfiles/blob/master/tmux/tmux.conf.symlink#L88-L98
# if-shell "uname | grep -q Darwin" {
#     bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'tmux save-buffer - | pbcopy'; \
#     bind C-c run 'tmux save-buffer - | pbcopy'; \
#     bind C-v run 'tmux set-buffer "$(pbpaste)"; tmux paste-buffer'
# }

# if-shell '[[ $(uname -s) = Linux ]]' {
#     bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -sel clipboard'; \
#     bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"; \
#     bind C-v run 'tmux set-buffer "$(xclip -o -sel clipboard)"; tmux paste-buffer'
# }

# Save entire tmux history to a file - file will be on machine where tmux is
# running
bind * command-prompt -p 'save window pane to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# = sessions --
# https://ronnieroller.com/tmux#management-script

# = buffers --
# bind b list-buffers  # list paste buffers
# bind p paste-buffer  # paste from the top paste buffer
# bind P choose-buffer -Z # choose which buffer to paste from

# = layouts --
# HOWTO:
#
#  tmux list-windows
# 1: dots* (1 panes) [352x84] [layout e2b3,352x84,0,0,62] @56 (active)
# 2: ssh-atlas- (3 panes) [352x84] [layout 7fc6,352x84,0,0[352x63,0,0,76,352x20,0,64{176x20,0,64,80,175x20,177,64,81}]] @67
# 3: ssh-app (2 panes) [352x84] [layout d30c,352x84,0,0[352x63,0,0,77,352x20,0,64,79]] @68
#
# tmux select-layout 7fc6,352x84,0,0[352x63,0,0,76,352x20,0,64{176x20,0,64,80,175x20,177,64,81}]
# or
# tmux select-layout a59c,206x60,0,0[206x51,0,0,0,206x8,0,52,1]

# -- [ status bar ] ------------------------------------------------------------

set -g status on
set -g status-interval 5
set -g status-justify left
set -g status-position top
set -g set-titles on                        # set terminal title
set -g allow-rename on
setw -g automatic-rename off
set -g set-titles-string "" # "#S / #W"
# set -g set-titles-string "#S | #I [ #W ]"
# set -g set-titles-string "#W"
# set -g set-titles-string "#W/#T"
set -g set-titles-string "#S | #W | #{pane_current_command}"
set -g display-time 1000 # tmux messages are displayed for n milliseconds
set -g display-panes-time 800 # slightly longer pane indicators display time
setw -g automatic-rename on


# = theme/colors/layout --

if-shell 'test -f "$XDG_CONFIG_HOME/tmux/megaforest.tmux.conf"' 'source -q $XDG_CONFIG_HOME/tmux/megaforest.tmux.conf'

# -- [ tpm/plugins ] -----------------------------------------------------------
# tmux plugin manager: github.com/tmux-plugins/tpm
set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.config/tmux/plugins"

# plugin settings
## --
set -g @dnd_on_icon "\uf59f DND#[fg=colour255] ⋮ "
set -g @dnd_off_icon ""

## --
set -g @prefix_highlight_fg             'red'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_prefix_prompt  'Wait⚋'
set -g @prefix_highlight_copy_prompt    'Copy⚋'
set -g @prefix_highlight_sync_prompt    'Sync⚋'
set -g @prefix_highlight_empty_prompt   '      '          # default is '' (empty char)
set -g @prefix_highlight_empty_attr     'fg=default,bg=#323d43' # default is 'fg=default,bg=default'
set -g @prefix_highlight_copy_mode_attr 'fg=#323d43,bg=yellow,bold'
set -g @prefix_highlight_bg             '#323d43'

## --
set -g @fuzzback-bind /
set -g @fuzzback-popup 1

## --
# Background color when cpu is medium
set -g @cpu_medium_fg_color "#[fg=orange]"
# Background color when cpu is high
set -g @cpu_high_fg_color "#[fg=red]"

## --
set -g @jump-key 's'

## --
set -g @sessionist-kill-session 'C-k'

## --
## Restore Vim sessions
set -g @resurrect-strategy-vim 'session'
## Restore Neovim sessions
set -g @resurrect-strategy-nvim 'session'
## Restore Panes
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'ssh mosh-client'
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

## Restore save and restore sessions automagically
# set -g @continuum-restore 'on'                      # Restore last saved environment (automatically)
# set -g @continuum-save-interval '60'                # save environment every 60 minutes

## --
set -g @navigate-left  '-n C-h'
set -g @navigate-down  '-n C-j'
set -g @navigate-up    '-n C-k'
set -g @navigate-right '-n C-l'
set -g @navigate-back  '-n C-\'

## --
set -g @thumbs-key space
set -g @thumbs-unique enabled
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.[a-z]+' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 '\-\-[a-zA-Z0-9_]+' # options
set -g @thumbs-contrast 1
set -g @thumbs-hint-fg-color red
set -g @thumbs-command 'echo -n {} | pbcopy && tmux display-message \"Copied {}\"'

## --
# REF: https://github.com/tmux-plugins/tmux-battery#iconscolors
set -g @batt_icon_charge_tier8 ""
set -g @batt_icon_charge_tier7 ""
set -g @batt_icon_charge_tier6 ""
set -g @batt_icon_charge_tier5 ""
set -g @batt_icon_charge_tier4 ""
set -g @batt_icon_charge_tier3 ""
set -g @batt_icon_charge_tier2 ""
set -g @batt_icon_charge_tier1 ""
set -g @batt_icon_status_charged ""
set -g @batt_icon_status_charging ""
set -g @batt_icon_status_discharging ""
set -g @batt_icon_status_attached "ﮣ" # 
set -g @batt_color_status_primary_discharging "#e39b7b"
set -g @batt_color_status_primary_charged "#a7c080"
set -g @batt_color_status_primary_charging "#d9bb80"

## --
TMUX_FZF_OPTIONS="-p -w 50% -h 50% -m"

## --
set -g @menus_trigger "C-m"

## --
set -g @extrakto_key "tab"
set -g @extrakto_popup_size "50%"

# plugins
set -g @plugin "tmux-plugins/tpm"
set -g @plugin "megalithic/tmux-dnd-status"
set -g @plugin "tmux-plugins/tmux-battery"
# set -g @plugin 'tmux-plugins/tmux-resurrect' # disable resurrection/restore of tmux session for now?
set -g @plugin "tmux-plugins/tmux-continuum"
set -g @plugin "tmux-plugins/tmux-cpu"
set -g @plugin "tmux-plugins/tmux-copycat"
set -g @plugin "tmux-plugins/tmux-yank"
set -g @plugin "tmux-plugins/tmux-open"
set -g @plugin "tmux-plugins/tmux-prefix-highlight"
set -g @plugin "NHDaly/tmux-better-mouse-mode"
set -g @plugin "soyuka/tmux-current-pane-hostname"
set -g @plugin "roosta/tmux-pop" # flashes the pane you're switching to
set -g @plugin "sunaku/tmux-navigate" # C-hjkl -- this presently works correctly for ssh/nvim/tmux navigation across panes and splits
set -g @plugin "tmux-plugins/tmux-sessionist" # prefix + g -- https://github.com/tmux-plugins/tmux-sessionist#features
set -g @plugin "roosta/tmux-fuzzback" # prefix + / (fzf search backwards)
set -g @plugin "schasse/tmux-jump" # prefix + s
set -g @plugin "fcsonline/tmux-thumbs" # prefix + space (copy things)
set -g @plugin "sainnhe/tmux-fzf" # prefix + t (bunch of tools)
set -g @plugin "tmux-plugins/tmux-cowboy" # prefix + * (kill process in current pane)
set -g @plugin "jaclu/tmux-menus" # prefix + c-m (actions menu)
set -g @plugin "laktak/extrakto" # prefix + tab (fzf the screen & dump to pane or to clipboard)

# install tpm if not already installed
if "test ! -d ~/.config/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm'"
run-shell "~/.config/tmux/plugins/tpm/tpm"

# # = load additional scripts --
# if-shell 'test "$PLATFORM" = "macos"' 'source -q ~/.tmux-macos.conf' 'source -q ~/.tmux-linux.conf'
# if-shell 'test -f "~/.tmux.config.local"' 'source -q ~/.tmux.config.local'

# vim: ft=tmux tw=0
