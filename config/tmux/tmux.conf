# -- [ prefix ] ----------------------------------------------------------------

unbind C-a
unbind C-space
unbind space
unbind c
unbind C-g
unbind C-z
unbind -T copy-mode-vi 'Enter'
unbind C-/

# NOTE / FIXME: C-a prefix binding is required for my kitty.conf pass-through bindings 😢
set -g prefix C-space
bind C-space send-prefix
# set -g prefix2 C-a
# bind C-a send-prefix
# set -g prefix2 C-enter
# bind C-return send-prefix

# -- [ general settings ] ------------------------------------------------------

set -g history-limit 999999
set -g default-shell "${HOMEBREW_PREFIX}/bin/zsh"
set -g update-environment "DISPLAY SSH_AUTH_SOCK SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION SSH_HOME WINDOWID XAUTHORITY SSHHOME TMUX GPG_AGENT" # https://github.com/cdown/dotfiles/blob/master/.tmux.conf
# NOTE: this overrides specify terminal capabilities you are overriding within tmux,
# this should "normally" be "xterm-256color" or "tmux-256color" but in the case of
# kitty it should be "xterm-kitty" so the solution/workaround here is to use the
# value of $TERM. This might not work for all terminals.
# see:
# https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
# https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.term
# set -g default-terminal "xterm-kitty" # or "tmux-256color" ?
set -g default-terminal "${TERM}"
# True colour support, the terminal info is from the outside of tmux https://sunaku.github.io/tmux-24bit-color.html#usage
set -ga terminal-overrides ",xterm-256color:Tc"
set -ga terminal-overrides ",tmux-256color:Tc"
set -ga terminal-overrides ",xterm-kitty:Tc"
set -ga terminal-overrides ",${TERM}:Tc"
set -as terminal-overrides ",${TERM}:RGB"
set -as terminal-features ",${TERM}:RGB"
# Neovim cursor changing support https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# Italics support
set -as terminal-overrides ',xterm*:sitm=\E[3m'
# Strikethrough support https://github.com/tmux/tmux/issues/612#issuecomment-288408841
set -as terminal-overrides ',xterm*:smxx=\E[9m'
set -ga terminal-features '*:clipboard:strikethrough:usstyle:RGB'
# Undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Enable colored underlines (e.g. in Vim)
set -a terminal-features '*:usstyle'
# Add colors to underscore/undercurl inside neovim [source: https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux]
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
set -g base-index 1 # 0 by default
set -g renumber-windows on # re-number windows when one is closed
set -g mouse on # FIXME: this potentially jacks with kitty's mouse copy selection stuff
# bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
# bind -n WheelDownPane select-pane -t= \; send-keys -M
set -g assume-paste-time 0            # Disable assume-paste-time, so that iTerm2's "Send Hex Codes" feature works with tmux 2.1. (https://github.com/edruder/maximum-awesome/commit/9e3d07f450ac60ec142c82e8b2ffb2777bf99fb4)
set -g repeat-time 0                  # Allow the arrow key to be used immediately after changing windows
# Neovim https://github.com/neovim/neovim/wiki/FAQ#esc-in-tmux-or-gnu-screen-is-delayed
set -sg escape-time 0
set -g focus-events on
set -w -g wrap-search off             # Don't wrap searches; it's super confusing given tmux's reverse-ordering of position info in copy mode.
set -g detach-on-destroy off
# emacs key bindings in tmux command prompt (prefix + :) are better than actually
# vi keys, even for vim users.
set -g status-keys emacs

# set -g visual-bell off
# set -g bell-action none
setw -g pane-base-index 1
setw -q -g utf8 on
setw -g xterm-keys on
setw -g aggressive-resize on          # allows multiple sessions to connect to the same server. only shows the resize border when both sessions are on the same windowe
setw -g monitor-activity on
setw -g visual-activity off
setw -g mode-keys vi

# -- [ key bindings ] ----------------------------------------------------------
# = to see current bindings: `tmux list-keys` or <prefix-?>

bind -r C-R source-file "~/.config/tmux/tmux.conf" \; display-message "Configuration reloaded."
bind r refresh-client

# = backward search ------------------------------------------------------------

bind -T copy-mode-vi "?" \
  command-prompt -ip "search up:" "send -X search-backward-incremental '%%%'"
bind -T copy-mode-vi "/" \
  command-prompt -ip "search down:" "send -X search-forward-incremental '%%%'"

# = splitting panes ------------------------------------------------------------

unbind |
unbind -
unbind s
bind v split-window -h -l 75 -c "#{pane_current_path}"
# bind h split-window -v -l 25 -c "#{pane_current_path}"
bind s split-window -v -l 25 -c "#{pane_current_path}"

# REF: https://github.com/numToStr/Navigator.nvim/wiki/Tmux-Integration
version_pat='s/^tmux[^0-9]*([.0-9]+).*/\1/p'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|et|ssh|mosh)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
tmux_version="$(tmux -V | sed -En "$version_pat")"
setenv -g tmux_version "$tmux_version"
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# = resizing -------------------------------------------------------------------

bind -r H resize-pane -L 10      # grow the current pane leftwards with <C-t>H
bind -r J resize-pane -D 10      # grow the current pane downwards with <C-t>J
bind -r K resize-pane -U 10      # grow the current pane upwards with <C-t>K
bind -r L resize-pane -R 10      # grow the current pane rightwards with <C-t>L

                                # Any of the above can be repeated easily by holding down Ctrl,
                                # hitting 'a' and then pressing H, J, K, or L repeatedly until the
                                # pane is the desired size.

# = new and kill ---------------------------------------------------------------

# bind c new-window -ac '#{pane_current_path}'
# bind -r C-t new-window -c "#{pane_current_path}"
# bind T command-prompt -p "(rename pane)" 'select-pane -T "%%"'
bind -r C-k confirm -p "kill-session #{session_name}? (y/n)" "kill-session"
bind -r C-x confirm -p "kill-window #{window_name}? (y/n)" "kill-window"
bind x confirm -p "kill-pane #{pane_index}? (y/n)" "kill-pane"
bind -r C-t new-window
bind -r t new-window

# = reorder windows ------------------------------------------------------------

# bind -r C-H swap-window -t -1 # move window one position to the left
# bind -r C-L swap-window -t +1 # move window one position to the right

# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1

# Make the current window the first window
bind T swap-window -t 1

# = sessions -------------------------------------------------------------------

# create new session
bind C-c command-prompt -p " new session ->" "run-shell \"ftm %1\""

# = popups ---------------------------------------------------------------------

# REF: https://github.com/meain/dotfiles/blob/master/tmux/.tmux.conf#L209-L226
# fuzzy find/switch session
# NOTE: in order for my fzf thing to work correctly in a tmux popup, we have to
# kill the popup without caring about exiting properly, e.g. no -E or -EE used:
bind C-Space display-popup -T " Sessions " -w "40%" -h "40%" "ftm -p && tmux display-popup -C"
bind -r C-L run-shell 'tmux switch-client -l'
# bind -r C-L run-shell 'tmux display-message "switched to #{client_last_session}.." ; tmux switch-client -l'
bind C-g display-popup -T " Lazygit " -w "70%" -h "60%" "lazygit"

# run an arbitrary command in a popup; interactive
bind C-z display-popup -E -w "45%" -h "35%" "zsh -l"

# notes/zk
bind C-n display-popup -EE -T " zk - new " -w "60%" -h "50%" "zsh -ic 'export TMUX_POPUP=1; zknew'"
bind C-e display-popup -EE -T " zk - edit " -w "60%" -h "50%" "zsh -ic 'export TMUX_POPUP=1; zk edit --interactive'"
bind C-o display-popup -EE -T " zk - 1:1 with dan " -w "60%" -h "50%" "zsh -ic 'export TMUX_POPUP=1; zk edit 202302272113'"
# bind C-k confirm -p "kill-session ${CURRENT_SESSION_NAME}? (y/n)"
# bind C-x confirm -p "kill-window ${CURRENT_SESSION_NAME}? (y/n)"

# slack
bind C-s display-popup -w "25%" -h "25%" "slck; tmux display-popup -C"

# use vim keybindings in search/copy mode
setw -g other-pane-height 25
setw -g other-pane-width 80

# turn off status-line for scratch sessions
set-hook -g client-session-changed {
  if-shell -F '#{==:#{session_name},slack}' { set -s status off } { set -s status on }
  if-shell -F '#{==:#{session_name},weechat}' { set -s status off } { set -s status on }
  if-shell -F '#{==:#{session_name},scratch}' { set -s status off } { set -s status on }
}

# = copy mode ------------------------------------------------------------------

# put us in copy-mode, without scrolling up
bind -r C-b copy-mode
# put us in copy-mode, and scroll up
bind -r C-v copy-mode -u

# don't exit copy mode when we hit the bottom
set -g @scroll-down-exit-copy-mode "off"

# select text with 'v' and copy with 'y'
# https://github.com/zanshin/dotfiles/blob/master/tmux/tmux.conf
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
if-shell '[[ $(uname -s) = Linux ]]' {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
} {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
}
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
# bind -T copy-mode-vi y if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"
# bind -T copy-mode-vi MouseDragEnd1Pane if-shell "test ! -z $KITTY_WINDOW_ID" "send-keys -X copy-pipe-and-cancel 'kitty +kitten clipboard'" "send-keys -X copy-pipe-and-cancel  'pbcopy'"

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

# REF: from monsieur @nicknisi -> https://github.com/nicknisi/dotfiles/blob/master/tmux/tmux.conf.symlink#L88-L98
# if-shell "uname | grep -q Darwin" {
#     bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'tmux save-buffer - | pbcopy'; \
#     bind C-c run 'tmux save-buffer - | pbcopy'; \
#     bind C-v run 'tmux set-buffer "$(pbpaste)"; tmux paste-buffer'
# }

# if-shell '[[ $(uname -s) = Linux ]]' {
#     bind -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -i -sel clipboard'; \
#     bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"; \
#     bind C-v run 'tmux set-buffer "$(xclip -o -sel clipboard)"; tmux paste-buffer'
# }

# Save entire tmux history to a file - file will be on machine where tmux is
# running.
bind * command-prompt -p 'save window pane to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# -- [ status bar ] ------------------------------------------------------------

set -g status on # set to `2` for double height
set -g status-interval 2 # statusbar refresh
set -g status-justify left
set -g status-position top
set -g set-titles on # set terminal title
set -g allow-rename on
setw -g automatic-rename on # set to `on` in order to work with nvim auto titlestring updating

# set -g set-titles-string "#S | #W | #{pane_current_command}"
# set -g set-titles-string "tmux [#{s/@//:window_id}][#P/#{window_panes}]{#F}:  #T"
set -g set-titles-string '❐ #S ● #I | #{pane_current_command}'
set -g display-time 1000 # tmux messages are displayed for n milliseconds
set -g display-panes-time 800 # slightly longer pane indicators display time

# = theme/colors/layout/statusbar ----------------------------------------------
if-shell 'test -f "$XDG_CONFIG_HOME/tmux/megaforest.tmux.conf"' 'source -q $XDG_CONFIG_HOME/tmux/megaforest.tmux.conf'

# -- [ tpm/plugins ] -----------------------------------------------------------
# tmux plugin manager: github.com/tmux-plugins/tpm
set-environment -g TMUX_PLUGIN_MANAGER_PATH "~/.config/tmux/plugins"

# = plugins list ---------------------------------------------------------------
# NOTE:
# prefix+I     -> install
# prefix+U     -> update
# prefix+alt+u -> uninstall
set -g @plugin "tmux-plugins/tpm"
set -g @plugin "tmux-plugins/tmux-battery"
set -g @plugin "tmux-plugins/tmux-cpu"
set -g @plugin "tmux-plugins/tmux-copycat"
set -g @plugin "tmux-plugins/tmux-yank"
# https://github.com/kylo252/dotfiles/commit/f884b2fdf42ab8ee06d74fbc98e90bf10f35da29#diff-f0c0f9ad689dff385a5855e5cccf30cd20b8558b48dcab71d30a1dad4bee32d8R228
if-shell "command -v xdg-open 2>/dev/null" { set -g @plugin 'tmux-plugins/tmux-open' }
set -g @plugin "tmux-plugins/tmux-prefix-highlight"
set -g @plugin "NHDaly/tmux-better-mouse-mode"
set -g @plugin "soyuka/tmux-current-pane-hostname"
set -g @plugin "roosta/tmux-pop" # flashes the pane you're switching to
set -g @plugin "lrustand/tmux-navigate" # C-hjkl -- this presently works correctly for ssh/nvim/tmux navigation across panes and splits
set -g @plugin "roosta/tmux-fuzzback" # prefix + / (fzf search backwards)
set -g @plugin "schasse/tmux-jump" # prefix + s (like easyjump, or hop.nvim)
set -g @plugin "fcsonline/tmux-thumbs" # prefix + f (copy things)
set -g @plugin "tmux-plugins/tmux-cowboy" # prefix + * (kill process in current pane with extreme prejudice)
set -g @plugin "jaclu/tmux-menus" # prefix + c-m (actions menu)
set -g @plugin "laktak/extrakto" # prefix + tab (fzf the screen & dump to pane or to clipboard)
set -g @plugin "olimorris/tmux-pomodoro-plus"
# set -g @plugin "whame/tmux-modal" # modal mode for various tmux things
# set -g @plugin "tmux-plugins/tmux-resurrect" # disable resurrection/restore of tmux session for now?
# set -g @plugin "tmux-plugins/tmux-continuum"


# = plugins settings -----------------------------------------------------------
## -- tmux-prefix-highlight
set -g @prefix_highlight_fg             "red"
set -g @prefix_highlight_show_copy_mode "on"
set -g @prefix_highlight_prefix_prompt  "\uf46e WAIT"
set -g @prefix_highlight_copy_prompt    "\uf68e COPY"
set -g @prefix_highlight_sync_prompt    "\uf9e5 SYNC"
set -g @prefix_highlight_empty_prompt   "  #S " #alts: (\uf490)﬿
set -g @prefix_highlight_empty_attr     "fg=#d8caac,bg=#3c474d"
set -g @prefix_highlight_copy_mode_attr "fg=#3c474d,bg=#d9bb80,bold"
set -g @prefix_highlight_bg             "#323d43"

## tmux-copycat
# set -g @copycat_search C-/

## tmux cpu
set -g @cpu_percentage_format "%3.0f%% "

## tmux-pomodoro-plus
set -g @pomodoro_on "#[fg=red]"
set -g @pomodoro_complete "#[fg=green]"
set -g @pomodoro_notifications 'on'

## tmux-fuzzback
set -g @fuzzback-bind '/'
set -g @fuzzback-popup 0
set -g @fuzzback-popup-size '80%'

## tmux-cpu
set -g @cpu_medium_fg_color "#[fg=orange]"
set -g @cpu_high_fg_color "#[fg=red]"

## tmux-jump
set -g @jump-key "g"

## tmux-navigate
set -g @navigate-left  "-n C-h"
set -g @navigate-down  "-n C-j"
set -g @navigate-up    "-n C-k"
set -g @navigate-right "-n C-l"
# set -g @navigate-back  "-n C-\\"

## tmux-thumbs
set -g @thumbs-key 'C-f'
set -g @thumbs-unique enabled
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.[a-z]+' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 '\-\-[a-zA-Z0-9_]+' # options
set -g @thumbs-contrast 1
set -g @thumbs-hint-fg-color red
set -g @thumbs-command 'echo -n {} | pbcopy && tmux display-message \"Copied {}\"'
set -g @thumbs-upcase-command 'echo -n {} | strings | xargs open'

## tmux-battery
# REF: https://github.com/tmux-plugins/tmux-battery#iconscolors
# set -g @batt_icon_charge_tier8 ""
# set -g @batt_icon_charge_tier7 ""
# set -g @batt_icon_charge_tier6 ""
# set -g @batt_icon_charge_tier5 ""
# set -g @batt_icon_charge_tier4 ""
# set -g @batt_icon_charge_tier3 ""
# set -g @batt_icon_charge_tier2 ""
# set -g @batt_icon_charge_tier1 ""
set -g @batt_icon_charge_tier8 ""
set -g @batt_icon_charge_tier7 ""
set -g @batt_icon_charge_tier6 ""
set -g @batt_icon_charge_tier5 ""
set -g @batt_icon_charge_tier4 ""
set -g @batt_icon_charge_tier3 ""
set -g @batt_icon_charge_tier2 ""
set -g @batt_icon_charge_tier1 ""
set -g @batt_icon_status_charged ""
set -g @batt_icon_status_charging ""
set -g @batt_icon_status_discharging ""
set -g @batt_icon_status_attached "" # alts: ﮣ
set -g @batt_icon_status_unknown "" # alts: 󱐋
set -g @batt_color_status_primary_discharging "#e39b7b"
set -g @batt_color_status_primary_charged "#a7c080"
set -g @batt_color_status_primary_charging "#d9bb80"
set -g @batt_color_status_primary_unknown "#e39b7b"
set -g @batt_color_charge_primary_discharging "#e39b7b"
set -g @batt_color_charge_primary_charged "#a7c080"
set -g @batt_color_charge_primary_charging "#d9bb80"
set -g @batt_color_charge_primary_unknown "#e39b7b"
set -g @batt_color_primary_discharging "#e39b7b"
set -g @batt_color_primary_charged "#a7c080"
set -g @batt_color_primary_charging "#d9bb80"
set -g @batt_color_primary_unknown "#e39b7b"
set -g @batt_remain_short true

## tmux-popup / fzf options
TMUX_FZF_OPTIONS="-p -w 50% -h 50% -m"
# TMUX_FZF_LAUNCH_KEY="C-t"

## tmux-menus
set -g @menus_trigger "C-m"

## extrakto
set -g @extrakto_key "tab"
set -g @extrakto_popup_size "50%"

# install tpm if not already installed
if "test ! -d ~/.local/share/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm'"
run-shell "~/.local/share/tmux/plugins/tpm/tpm"

# # = load additional scripts --
# if-shell 'test "$PLATFORM" = "macos"' 'source -q ~/.tmux-macos.conf' 'source -q ~/.tmux-linux.conf'
# if-shell 'test -f "~/.tmux.config.local"' 'source -q ~/.tmux.config.local'

# vim:ft=tmux tw=0
