global !p
from snippet_helpers import *
endglobal

### -- General ---------------------------------------------------------------

snippet log "console.log (basic)" b
console.log('$1', ${1})$0
endsnippet

snippet cl "console.log" b
console.log(${1})
endsnippet

snippet warn "console.warn (basic)" b
console.warn('$1', ${1})$0
endsnippet

snippet info "console.info (basic)" b
console.info('$1', ${1})$0
endsnippet

snippet error "console.error (basic)" b
console.error('$1', ${1})$0
endsnippet

snippet ca "console.assert" b
console.assert(${1}, ${2:'Condition'})
endsnippet

snippet ci "console.info" b
console.info(${1})
endsnippet

snippet cw "console.warn" b
console.warn(${1})
endsnippet

snippet cd "console.debug" b
console.debug(${1})
endsnippet

snippet cc "console.count" b
console.count(${1})
endsnippet

snippet ct "console.table" b
console.table(${1}${2:,${3:['Optional column to show']}})
endsnippet

snippet cti "console.time" b
console.time(${1})
${0:${VISUAL}}
console.timeEnd($1)
endsnippet

snippet cg "console.group" b
console.group(${1})
cosnole.log(${2})$3
console.groupEnd()$0
endsnippet


### -- Testing ---------------------------------------------------------------

extends javascript-jest

### -- Imports ---------------------------------------------------------------

snippet imp "import default from" b
import $1 from '$2';
endsnippet

snippet imn "import destructure" b
import { $1 } from '$2';
endsnippet

snippet ima "import * as " b
import * as $1 from '$2'
endsnippet

snippet pretty "pretty-print JSON-able data" b
console.log(
  JSON.stringify({
    $1
  }, null, 2)
)
endsnippet

# Functions

snippet fun "function with dynamic docblock" bA
`!p snip.rv=jsDoc(t[2])`
function ${1}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet iife
((${1:window, document, undefined}) => {
	${0:${VISUAL}}
}(${2:win, doc}))
endsnippet

# Loops

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
	$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet forof "for of loop" b
for (let ${1:value} of ${2:Things}) {
	${0:${VISUAL}}
}
endsnippet

snippet forin "for each loop" b
for (let ${1:key} in ${2:object}) {
	if ($2.hasOwnProperty($1)) {
		${0:let ${3:value} = $2[$1];}
	}
}
endsnippet

# Modules

# # Only expand if on an empty line
# snippet "^req" "require()" brA
# const `!p snip.rv=formatVariableName(t[2])` = require('${2}')
# endsnippet

# # Only expand if on an empty line
# snippet "^imp" "import x form y" brA
# import `!p snip.rv=formatVariableName(t[1])` from '${1}'
# endsnippet


snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`}$0
endsnippet

snippet ed "export default" b
export default ${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`}$0
endsnippet


# Conditionals

snippet if "if" b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eif "else if" !
else if (${1}) {
	${0:${VISUAL}}
}
endsnippet


# Switches

snippet sw "switch" b
switch (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet case "case" b
case ${1}:
	${0:${VISUAL}}
	break;
endsnippet
