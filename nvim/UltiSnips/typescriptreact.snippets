extends typescript

#
#	Helpers
#

global !p
def ComponentName(name=None):
	name = name or 'ModuleName'
	s1 = re.sub('\.ts(x?)$', '', name)
	return ''.join(x.title() for x in re.sub('\.ts(x?)$', '', name).split('-'))
endglobal

#
#	React snippets
#

#
## class component skeleton
# filename without extensions -> ${1:`!v expand('%:t:r')`}
#
snippet rcc "create class component" b
import React, { Component } from 'react'
import styles from './_${2:`!v expand('%:t:r')`}.scss';

${3:type Props = {
	$4
}}

export class ${1:`!p snip.rv = ComponentName(snip.basename)`} extends Component<Props> {
	$0
	render() {
		return (
			${5:<div>
				$6
			</div>}
		);
	}
}
endsnippet

#
## stateless/functional component skeleton
#

snippet rsc "create stateless functional component" b
import React from 'react'
import styles from './_${2:`!v expand('%:t:r')`}.scss';

export const ${1:`!p snip.rv = ComponentName(snip.basename)`} = ({${2:prop}}) => {
	$0
	return (
		${3:<div>
			$4
		</div>}
	)
}
$1.displayName = '$1'
endsnippet

#
## imports & exports
#

snippet impn "import named module" b
import { ${1:module} } from ''$0
endsnippet

snippet impd "import default module" b
import ${1:module} from ''$0
endsnippet

snippet expd "export default" b
export default $0
endsnippet

#
## return jsx
#

snippet ret() "return ();" b
return (
	${1:<div>
		$2
	</div>}
)
endsnippet

#
## Component specs & lifecycle
#

snippet cdm "component did mount" b
componentDidMount() {
	${1}
}$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
}$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	${1}
}$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
}$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount() {
	${1}
}$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
}$0
endsnippet

snippet ren
render() {
	return (
		${1:<div>
			$2
		</div>}
	)
}
$0
endsnippet

#
## state
#

snippet constst "construct state" b
constructor(props) {
	super(props)

	${1:this.state = {
		$2
	}}
}

$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
})$0
endsnippet

snippet sstu "set state, with update callback" b
this.setState(() => ({
	${2: ${1: $1}}
}))$0
endsnippet

snippet props "get property" i
this.props.${1}
endsnippet

snippet state "get state" i
this.state.${1}
endsnippet

#
## DOM render
#

snippet domren "render component to DOM" b
ReactDOM.render(${1:<$2 />}, document.${3:querySelector('$4')});
endsnippet

#
## React Redux
#

snippet mstp "mapStateToProps" b
function mapStateToProps(state) {
	return {
		$1
	}
}
endsnippet

snippet mdtp "mapDispatchToProps" b
function mapDispatchToProps(dispatch) {
	return {
		$1
	}
}
endsnippet

snippet expcon "export default connect()()" b
export default connect(${1:mapStateToProps}${2:, }${3:mapDispatchToProps})($4)
endsnippet

#
## React Router
#

snippet impL "import Link from react-router" b
import { Link } from 'react-router';
endsnippet

snippet routes "import Route, IndexRoute" b
import React from 'react';
import { Route, IndexRoute } from 'react-router';

import ${1} from '${2}';
import ${3} from '${4}';
import ${6} from '${7}';
$0
export default (
	<Route path="/" component={$1}>
		<IndexRoute component={$3} />
		<Route path="${5}" component={$6} />
	</Route>
);
endsnippet

snippet link "add react-router link"
<Link to="${1}" ${2:className="${3}"}>
	$4
</Link>$0
endsnippet
