snippet -> "subcase" b
${1:value} ->
	${2:code}
endsnippet

snippet impex "import x as x exposing (x)" b
import ${1:package} exposing ($2)
endsnippet

snippet impax "import x as x exposing (x)" b
import ${1:package} as $2 exposing ($3)
endsnippet

snippet mod
module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` exposing (${1})
${0}
endsnippet

snippet imp
import ${0:Http}
endsnippet

snippet impe
import ${1:Html} exposing (${0:..})
endsnippet

snippet impae
import ${1:Json.Encode} as ${2:Encode} exposing (${0:Value})
endsnippet

snippet fn
${1:fn} : ${2:a} -> ${3:a}
$1 ${4} =
	${0}
endsnippet

snippet fn1
${1:fn} : ${2:a} -> ${3:a}
$1 ${4} =
	${0}
endsnippet

snippet fn2
${1:fn} : ${2:a} -> ${3:a} -> ${4:a}
$1 ${5} =
	${0}
endsnippet

snippet fn3
${1:fn} : ${2:a} -> ${3:a} -> ${4:a} -> ${5:a}
$1 ${6} =
	${0}
endsnippet

snippet fn0
${1:fn} : ${2:a}
$1 =
	${0}
endsnippet

snippet case
case ${1} of
	${2} ->
		${0}
endsnippet

snippet -
${1} ->
	${0}
endsnippet

snippet let
let
	${1} =
		${2}
in
	${0}
endsnippet

snippet if
if ${1} then
	${2:${VISUAL}}
else
	${0}
endsnippet

snippet ty
type ${1:Msg}
	= ${0}
endsnippet

snippet tya
type alias ${1:Model} =
	${0}
endsnippet

snippet test
test "${1}" <| \_ -> $0
endsnippet

snippet doc
{-| ${0}
-}
endsnippet

snippet p
|> ${0}
endsnippet

snippet ldebug
let
	_ =
		Debug.log "${1}" ${2:$1}
in
${0}
endsnippet

snippet debug
_ =
	Debug.log "${1}" ${2:$1}
${0}
endsnippet

